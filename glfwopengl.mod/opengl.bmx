'
' NOTE : Generated file. Do not edit. Your changes may be lost on the next update!
'        Generated by g2bmx on 21 Mar 2020
'
Strict

Import "../glfw.mod/glfw/deps/*.h"
Import "../glfw.mod/glfw/deps/glad/gl.h"

Extern

Const GL_2D=$0600
Const GL_2_BYTES=$1407
Const GL_3D=$0601
Const GL_3D_COLOR=$0602
Const GL_3D_COLOR_TEXTURE=$0603
Const GL_3_BYTES=$1408
Const GL_4D_COLOR_TEXTURE=$0604
Const GL_4_BYTES=$1409
Const GL_ACCUM=$0100
Const GL_ACCUM_ALPHA_BITS=$0D5B
Const GL_ACCUM_BLUE_BITS=$0D5A
Const GL_ACCUM_BUFFER_BIT=$00000200
Const GL_ACCUM_CLEAR_VALUE=$0B80
Const GL_ACCUM_GREEN_BITS=$0D59
Const GL_ACCUM_RED_BITS=$0D58
Const GL_ACTIVE_ATTRIBUTES=$8B89
Const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH=$8B8A
Const GL_ACTIVE_TEXTURE=$84E0
Const GL_ACTIVE_UNIFORMS=$8B86
Const GL_ACTIVE_UNIFORM_BLOCKS=$8A36
Const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH=$8A35
Const GL_ACTIVE_UNIFORM_MAX_LENGTH=$8B87
Const GL_ADD=$0104
Const GL_ADD_SIGNED=$8574
Const GL_ALIASED_LINE_WIDTH_RANGE=$846E
Const GL_ALIASED_POINT_SIZE_RANGE=$846D
Const GL_ALL_ATTRIB_BITS=$FFFFFFFF
Const GL_ALPHA=$1906
Const GL_ALPHA12=$803D
Const GL_ALPHA16=$803E
Const GL_ALPHA4=$803B
Const GL_ALPHA8=$803C
Const GL_ALPHA_BIAS=$0D1D
Const GL_ALPHA_BITS=$0D55
Const GL_ALPHA_INTEGER=$8D97
Const GL_ALPHA_SCALE=$0D1C
Const GL_ALPHA_TEST=$0BC0
Const GL_ALPHA_TEST_FUNC=$0BC1
Const GL_ALPHA_TEST_REF=$0BC2
Const GL_ALREADY_SIGNALED=$911A
Const GL_ALWAYS=$0207
Const GL_AMBIENT=$1200
Const GL_AMBIENT_AND_DIFFUSE=$1602
Const GL_AND=$1501
Const GL_AND_INVERTED=$1504
Const GL_AND_REVERSE=$1502
Const GL_ANY_SAMPLES_PASSED=$8C2F
Const GL_ARRAY_BUFFER=$8892
Const GL_ARRAY_BUFFER_BINDING=$8894
Const GL_ATTACHED_SHADERS=$8B85
Const GL_ATTRIB_STACK_DEPTH=$0BB0
Const GL_AUTO_NORMAL=$0D80
Const GL_AUX0=$0409
Const GL_AUX1=$040A
Const GL_AUX2=$040B
Const GL_AUX3=$040C
Const GL_AUX_BUFFERS=$0C00
Const GL_BACK=$0405
Const GL_BACK_LEFT=$0402
Const GL_BACK_RIGHT=$0403
Const GL_BGR=$80E0
Const GL_BGRA=$80E1
Const GL_BGRA_INTEGER=$8D9B
Const GL_BGR_INTEGER=$8D9A
Const GL_BITMAP=$1A00
Const GL_BITMAP_TOKEN=$0704
Const GL_BLEND=$0BE2
Const GL_BLEND_COLOR=$8005
Const GL_BLEND_DST=$0BE0
Const GL_BLEND_DST_ALPHA=$80CA
Const GL_BLEND_DST_RGB=$80C8
Const GL_BLEND_EQUATION=$8009
Const GL_BLEND_EQUATION_ALPHA=$883D
Const GL_BLEND_EQUATION_RGB=$8009
Const GL_BLEND_SRC=$0BE1
Const GL_BLEND_SRC_ALPHA=$80CB
Const GL_BLEND_SRC_RGB=$80C9
Const GL_BLUE=$1905
Const GL_BLUE_BIAS=$0D1B
Const GL_BLUE_BITS=$0D54
Const GL_BLUE_INTEGER=$8D96
Const GL_BLUE_SCALE=$0D1A
Const GL_BOOL=$8B56
Const GL_BOOL_VEC2=$8B57
Const GL_BOOL_VEC3=$8B58
Const GL_BOOL_VEC4=$8B59
Const GL_BUFFER=$82E0
Const GL_BUFFER_ACCESS=$88BB
Const GL_BUFFER_ACCESS_FLAGS=$911F
Const GL_BUFFER_MAPPED=$88BC
Const GL_BUFFER_MAP_LENGTH=$9120
Const GL_BUFFER_MAP_OFFSET=$9121
Const GL_BUFFER_MAP_POINTER=$88BD
Const GL_BUFFER_SIZE=$8764
Const GL_BUFFER_USAGE=$8765
Const GL_BYTE=$1400
Const GL_C3F_V3F=$2A24
Const GL_C4F_N3F_V3F=$2A26
Const GL_C4UB_V2F=$2A22
Const GL_C4UB_V3F=$2A23
Const GL_CCW=$0901
Const GL_CLAMP=$2900
Const GL_CLAMP_FRAGMENT_COLOR=$891B
Const GL_CLAMP_READ_COLOR=$891C
Const GL_CLAMP_TO_BORDER=$812D
Const GL_CLAMP_TO_EDGE=$812F
Const GL_CLAMP_VERTEX_COLOR=$891A
Const GL_CLEAR=$1500
Const GL_CLIENT_ACTIVE_TEXTURE=$84E1
Const GL_CLIENT_ALL_ATTRIB_BITS=$FFFFFFFF
Const GL_CLIENT_ATTRIB_STACK_DEPTH=$0BB1
Const GL_CLIENT_PIXEL_STORE_BIT=$00000001
Const GL_CLIENT_VERTEX_ARRAY_BIT=$00000002
Const GL_CLIP_DISTANCE0=$3000
Const GL_CLIP_DISTANCE1=$3001
Const GL_CLIP_DISTANCE2=$3002
Const GL_CLIP_DISTANCE3=$3003
Const GL_CLIP_DISTANCE4=$3004
Const GL_CLIP_DISTANCE5=$3005
Const GL_CLIP_DISTANCE6=$3006
Const GL_CLIP_DISTANCE7=$3007
Const GL_CLIP_PLANE0=$3000
Const GL_CLIP_PLANE1=$3001
Const GL_CLIP_PLANE2=$3002
Const GL_CLIP_PLANE3=$3003
Const GL_CLIP_PLANE4=$3004
Const GL_CLIP_PLANE5=$3005
Const GL_COEFF=$0A00
Const GL_COLOR=$1800
Const GL_COLOR_ARRAY=$8076
Const GL_COLOR_ARRAY_BUFFER_BINDING=$8898
Const GL_COLOR_ARRAY_POINTER=$8090
Const GL_COLOR_ARRAY_SIZE=$8081
Const GL_COLOR_ARRAY_STRIDE=$8083
Const GL_COLOR_ARRAY_TYPE=$8082
Const GL_COLOR_ATTACHMENT0=$8CE0
Const GL_COLOR_ATTACHMENT1=$8CE1
Const GL_COLOR_ATTACHMENT10=$8CEA
Const GL_COLOR_ATTACHMENT11=$8CEB
Const GL_COLOR_ATTACHMENT12=$8CEC
Const GL_COLOR_ATTACHMENT13=$8CED
Const GL_COLOR_ATTACHMENT14=$8CEE
Const GL_COLOR_ATTACHMENT15=$8CEF
Const GL_COLOR_ATTACHMENT16=$8CF0
Const GL_COLOR_ATTACHMENT17=$8CF1
Const GL_COLOR_ATTACHMENT18=$8CF2
Const GL_COLOR_ATTACHMENT19=$8CF3
Const GL_COLOR_ATTACHMENT2=$8CE2
Const GL_COLOR_ATTACHMENT20=$8CF4
Const GL_COLOR_ATTACHMENT21=$8CF5
Const GL_COLOR_ATTACHMENT22=$8CF6
Const GL_COLOR_ATTACHMENT23=$8CF7
Const GL_COLOR_ATTACHMENT24=$8CF8
Const GL_COLOR_ATTACHMENT25=$8CF9
Const GL_COLOR_ATTACHMENT26=$8CFA
Const GL_COLOR_ATTACHMENT27=$8CFB
Const GL_COLOR_ATTACHMENT28=$8CFC
Const GL_COLOR_ATTACHMENT29=$8CFD
Const GL_COLOR_ATTACHMENT3=$8CE3
Const GL_COLOR_ATTACHMENT30=$8CFE
Const GL_COLOR_ATTACHMENT31=$8CFF
Const GL_COLOR_ATTACHMENT4=$8CE4
Const GL_COLOR_ATTACHMENT5=$8CE5
Const GL_COLOR_ATTACHMENT6=$8CE6
Const GL_COLOR_ATTACHMENT7=$8CE7
Const GL_COLOR_ATTACHMENT8=$8CE8
Const GL_COLOR_ATTACHMENT9=$8CE9
Const GL_COLOR_BUFFER_BIT=$00004000
Const GL_COLOR_CLEAR_VALUE=$0C22
Const GL_COLOR_INDEX=$1900
Const GL_COLOR_INDEXES=$1603
Const GL_COLOR_LOGIC_OP=$0BF2
Const GL_COLOR_MATERIAL=$0B57
Const GL_COLOR_MATERIAL_FACE=$0B55
Const GL_COLOR_MATERIAL_PARAMETER=$0B56
Const GL_COLOR_SUM=$8458
Const GL_COLOR_WRITEMASK=$0C23
Const GL_COMBINE=$8570
Const GL_COMBINE_ALPHA=$8572
Const GL_COMBINE_RGB=$8571
Const GL_COMPARE_REF_TO_TEXTURE=$884E
Const GL_COMPARE_R_TO_TEXTURE=$884E
Const GL_COMPILE=$1300
Const GL_COMPILE_AND_EXECUTE=$1301
Const GL_COMPILE_STATUS=$8B81
Const GL_COMPRESSED_ALPHA=$84E9
Const GL_COMPRESSED_INTENSITY=$84EC
Const GL_COMPRESSED_LUMINANCE=$84EA
Const GL_COMPRESSED_LUMINANCE_ALPHA=$84EB
Const GL_COMPRESSED_RED=$8225
Const GL_COMPRESSED_RED_RGTC1=$8DBB
Const GL_COMPRESSED_RG=$8226
Const GL_COMPRESSED_RGB=$84ED
Const GL_COMPRESSED_RGBA=$84EE
Const GL_COMPRESSED_RG_RGTC2=$8DBD
Const GL_COMPRESSED_SIGNED_RED_RGTC1=$8DBC
Const GL_COMPRESSED_SIGNED_RG_RGTC2=$8DBE
Const GL_COMPRESSED_SLUMINANCE=$8C4A
Const GL_COMPRESSED_SLUMINANCE_ALPHA=$8C4B
Const GL_COMPRESSED_SRGB=$8C48
Const GL_COMPRESSED_SRGB_ALPHA=$8C49
Const GL_COMPRESSED_TEXTURE_FORMATS=$86A3
Const GL_CONDITION_SATISFIED=$911C
Const GL_CONSTANT=$8576
Const GL_CONSTANT_ALPHA=$8003
Const GL_CONSTANT_ATTENUATION=$1207
Const GL_CONSTANT_COLOR=$8001
Const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT=$00000002
Const GL_CONTEXT_CORE_PROFILE_BIT=$00000001
Const GL_CONTEXT_FLAGS=$821E
Const GL_CONTEXT_FLAG_DEBUG_BIT=$00000002
Const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT=$00000001
Const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB=$00000004
Const GL_CONTEXT_PROFILE_MASK=$9126
Const GL_COORD_REPLACE=$8862
Const GL_COPY=$1503
Const GL_COPY_INVERTED=$150C
Const GL_COPY_PIXEL_TOKEN=$0706
Const GL_COPY_READ_BUFFER=$8F36
Const GL_COPY_WRITE_BUFFER=$8F37
Const GL_CULL_FACE=$0B44
Const GL_CULL_FACE_MODE=$0B45
Const GL_CURRENT_BIT=$00000001
Const GL_CURRENT_COLOR=$0B00
Const GL_CURRENT_FOG_COORD=$8453
Const GL_CURRENT_FOG_COORDINATE=$8453
Const GL_CURRENT_INDEX=$0B01
Const GL_CURRENT_NORMAL=$0B02
Const GL_CURRENT_PROGRAM=$8B8D
Const GL_CURRENT_QUERY=$8865
Const GL_CURRENT_RASTER_COLOR=$0B04
Const GL_CURRENT_RASTER_DISTANCE=$0B09
Const GL_CURRENT_RASTER_INDEX=$0B05
Const GL_CURRENT_RASTER_POSITION=$0B07
Const GL_CURRENT_RASTER_POSITION_VALID=$0B08
Const GL_CURRENT_RASTER_SECONDARY_COLOR=$845F
Const GL_CURRENT_RASTER_TEXTURE_COORDS=$0B06
Const GL_CURRENT_SECONDARY_COLOR=$8459
Const GL_CURRENT_TEXTURE_COORDS=$0B03
Const GL_CURRENT_VERTEX_ATTRIB=$8626
Const GL_CW=$0900
Const GL_DEBUG_CALLBACK_FUNCTION=$8244
Const GL_DEBUG_CALLBACK_USER_PARAM=$8245
Const GL_DEBUG_GROUP_STACK_DEPTH=$826D
Const GL_DEBUG_LOGGED_MESSAGES=$9145
Const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH=$8243
Const GL_DEBUG_OUTPUT=$92E0
Const GL_DEBUG_OUTPUT_SYNCHRONOUS=$8242
Const GL_DEBUG_SEVERITY_HIGH=$9146
Const GL_DEBUG_SEVERITY_LOW=$9148
Const GL_DEBUG_SEVERITY_MEDIUM=$9147
Const GL_DEBUG_SEVERITY_NOTIFICATION=$826B
Const GL_DEBUG_SOURCE_API=$8246
Const GL_DEBUG_SOURCE_APPLICATION=$824A
Const GL_DEBUG_SOURCE_OTHER=$824B
Const GL_DEBUG_SOURCE_SHADER_COMPILER=$8248
Const GL_DEBUG_SOURCE_THIRD_PARTY=$8249
Const GL_DEBUG_SOURCE_WINDOW_SYSTEM=$8247
Const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR=$824D
Const GL_DEBUG_TYPE_ERROR=$824C
Const GL_DEBUG_TYPE_MARKER=$8268
Const GL_DEBUG_TYPE_OTHER=$8251
Const GL_DEBUG_TYPE_PERFORMANCE=$8250
Const GL_DEBUG_TYPE_POP_GROUP=$826A
Const GL_DEBUG_TYPE_PORTABILITY=$824F
Const GL_DEBUG_TYPE_PUSH_GROUP=$8269
Const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR=$824E
Const GL_DECAL=$2101
Const GL_DECR=$1E03
Const GL_DECR_WRAP=$8508
Const GL_DELETE_STATUS=$8B80
Const GL_DEPTH=$1801
Const GL_DEPTH24_STENCIL8=$88F0
Const GL_DEPTH32F_STENCIL8=$8CAD
Const GL_DEPTH_ATTACHMENT=$8D00
Const GL_DEPTH_BIAS=$0D1F
Const GL_DEPTH_BITS=$0D56
Const GL_DEPTH_BUFFER_BIT=$00000100
Const GL_DEPTH_CLAMP=$864F
Const GL_DEPTH_CLEAR_VALUE=$0B73
Const GL_DEPTH_COMPONENT=$1902
Const GL_DEPTH_COMPONENT16=$81A5
Const GL_DEPTH_COMPONENT24=$81A6
Const GL_DEPTH_COMPONENT32=$81A7
Const GL_DEPTH_COMPONENT32F=$8CAC
Const GL_DEPTH_FUNC=$0B74
Const GL_DEPTH_RANGE=$0B70
Const GL_DEPTH_SCALE=$0D1E
Const GL_DEPTH_STENCIL=$84F9
Const GL_DEPTH_STENCIL_ATTACHMENT=$821A
Const GL_DEPTH_TEST=$0B71
Const GL_DEPTH_TEXTURE_MODE=$884B
Const GL_DEPTH_WRITEMASK=$0B72
Const GL_DIFFUSE=$1201
Const GL_DISPLAY_LIST=$82E7
Const GL_DITHER=$0BD0
Const GL_DOMAIN=$0A02
Const GL_DONT_CARE=$1100
Const GL_DOT3_RGB=$86AE
Const GL_DOT3_RGBA=$86AF
Const GL_DOUBLE=$140A
Const GL_DOUBLEBUFFER=$0C32
Const GL_DRAW_BUFFER=$0C01
Const GL_DRAW_BUFFER0=$8825
Const GL_DRAW_BUFFER1=$8826
Const GL_DRAW_BUFFER10=$882F
Const GL_DRAW_BUFFER11=$8830
Const GL_DRAW_BUFFER12=$8831
Const GL_DRAW_BUFFER13=$8832
Const GL_DRAW_BUFFER14=$8833
Const GL_DRAW_BUFFER15=$8834
Const GL_DRAW_BUFFER2=$8827
Const GL_DRAW_BUFFER3=$8828
Const GL_DRAW_BUFFER4=$8829
Const GL_DRAW_BUFFER5=$882A
Const GL_DRAW_BUFFER6=$882B
Const GL_DRAW_BUFFER7=$882C
Const GL_DRAW_BUFFER8=$882D
Const GL_DRAW_BUFFER9=$882E
Const GL_DRAW_FRAMEBUFFER=$8CA9
Const GL_DRAW_FRAMEBUFFER_BINDING=$8CA6
Const GL_DRAW_PIXEL_TOKEN=$0705
Const GL_DST_ALPHA=$0304
Const GL_DST_COLOR=$0306
Const GL_DYNAMIC_COPY=$88EA
Const GL_DYNAMIC_DRAW=$88E8
Const GL_DYNAMIC_READ=$88E9
Const GL_EDGE_FLAG=$0B43
Const GL_EDGE_FLAG_ARRAY=$8079
Const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING=$889B
Const GL_EDGE_FLAG_ARRAY_POINTER=$8093
Const GL_EDGE_FLAG_ARRAY_STRIDE=$808C
Const GL_ELEMENT_ARRAY_BUFFER=$8893
Const GL_ELEMENT_ARRAY_BUFFER_BINDING=$8895
Const GL_EMISSION=$1600
Const GL_ENABLE_BIT=$00002000
Const GL_EQUAL=$0202
Const GL_EQUIV=$1509
Const GL_EVAL_BIT=$00010000
Const GL_EXP=$0800
Const GL_EXP2=$0801
Const GL_EXTENSIONS=$1F03
Const GL_EYE_LINEAR=$2400
Const GL_EYE_PLANE=$2502
Const GL_FALSE=0
Const GL_FASTEST=$1101
Const GL_FEEDBACK=$1C01
Const GL_FEEDBACK_BUFFER_POINTER=$0DF0
Const GL_FEEDBACK_BUFFER_SIZE=$0DF1
Const GL_FEEDBACK_BUFFER_TYPE=$0DF2
Const GL_FILL=$1B02
Const GL_FIRST_VERTEX_CONVENTION=$8E4D
Const GL_FIXED_ONLY=$891D
Const GL_FLAT=$1D00
Const GL_FLOAT=$1406
Const GL_FLOAT_32_UNSIGNED_INT_24_8_REV=$8DAD
Const GL_FLOAT_MAT2=$8B5A
Const GL_FLOAT_MAT2x3=$8B65
Const GL_FLOAT_MAT2x4=$8B66
Const GL_FLOAT_MAT3=$8B5B
Const GL_FLOAT_MAT3x2=$8B67
Const GL_FLOAT_MAT3x4=$8B68
Const GL_FLOAT_MAT4=$8B5C
Const GL_FLOAT_MAT4x2=$8B69
Const GL_FLOAT_MAT4x3=$8B6A
Const GL_FLOAT_VEC2=$8B50
Const GL_FLOAT_VEC3=$8B51
Const GL_FLOAT_VEC4=$8B52
Const GL_FOG=$0B60
Const GL_FOG_BIT=$00000080
Const GL_FOG_COLOR=$0B66
Const GL_FOG_COORD=$8451
Const GL_FOG_COORDINATE=$8451
Const GL_FOG_COORDINATE_ARRAY=$8457
Const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING=$889D
Const GL_FOG_COORDINATE_ARRAY_POINTER=$8456
Const GL_FOG_COORDINATE_ARRAY_STRIDE=$8455
Const GL_FOG_COORDINATE_ARRAY_TYPE=$8454
Const GL_FOG_COORDINATE_SOURCE=$8450
Const GL_FOG_COORD_ARRAY=$8457
Const GL_FOG_COORD_ARRAY_BUFFER_BINDING=$889D
Const GL_FOG_COORD_ARRAY_POINTER=$8456
Const GL_FOG_COORD_ARRAY_STRIDE=$8455
Const GL_FOG_COORD_ARRAY_TYPE=$8454
Const GL_FOG_COORD_SRC=$8450
Const GL_FOG_DENSITY=$0B62
Const GL_FOG_END=$0B64
Const GL_FOG_HINT=$0C54
Const GL_FOG_INDEX=$0B61
Const GL_FOG_MODE=$0B65
Const GL_FOG_START=$0B63
Const GL_FRAGMENT_DEPTH=$8452
Const GL_FRAGMENT_SHADER=$8B30
Const GL_FRAGMENT_SHADER_DERIVATIVE_HINT=$8B8B
Const GL_FRAMEBUFFER=$8D40
Const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE=$8215
Const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE=$8214
Const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING=$8210
Const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE=$8211
Const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE=$8216
Const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE=$8213
Const GL_FRAMEBUFFER_ATTACHMENT_LAYERED=$8DA7
Const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=$8CD1
Const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=$8CD0
Const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE=$8212
Const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE=$8217
Const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=$8CD3
Const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER=$8CD4
Const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=$8CD2
Const GL_FRAMEBUFFER_BINDING=$8CA6
Const GL_FRAMEBUFFER_COMPLETE=$8CD5
Const GL_FRAMEBUFFER_DEFAULT=$8218
Const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT=$8CD6
Const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER=$8CDB
Const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS=$8DA8
Const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=$8CD7
Const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE=$8D56
Const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER=$8CDC
Const GL_FRAMEBUFFER_SRGB=$8DB9
Const GL_FRAMEBUFFER_UNDEFINED=$8219
Const GL_FRAMEBUFFER_UNSUPPORTED=$8CDD
Const GL_FRONT=$0404
Const GL_FRONT_AND_BACK=$0408
Const GL_FRONT_FACE=$0B46
Const GL_FRONT_LEFT=$0400
Const GL_FRONT_RIGHT=$0401
Const GL_FUNC_ADD=$8006
Const GL_FUNC_REVERSE_SUBTRACT=$800B
Const GL_FUNC_SUBTRACT=$800A
Const GL_GENERATE_MIPMAP=$8191
Const GL_GENERATE_MIPMAP_HINT=$8192
Const GL_GEOMETRY_INPUT_TYPE=$8917
Const GL_GEOMETRY_OUTPUT_TYPE=$8918
Const GL_GEOMETRY_SHADER=$8DD9
Const GL_GEOMETRY_VERTICES_OUT=$8916
Const GL_GEQUAL=$0206
Const GL_GREATER=$0204
Const GL_GREEN=$1904
Const GL_GREEN_BIAS=$0D19
Const GL_GREEN_BITS=$0D53
Const GL_GREEN_INTEGER=$8D95
Const GL_GREEN_SCALE=$0D18
Const GL_GUILTY_CONTEXT_RESET_ARB=$8253
Const GL_HALF_FLOAT=$140B
Const GL_HINT_BIT=$00008000
Const GL_INCR=$1E02
Const GL_INCR_WRAP=$8507
Const GL_INDEX=$8222
Const GL_INDEX_ARRAY=$8077
Const GL_INDEX_ARRAY_BUFFER_BINDING=$8899
Const GL_INDEX_ARRAY_POINTER=$8091
Const GL_INDEX_ARRAY_STRIDE=$8086
Const GL_INDEX_ARRAY_TYPE=$8085
Const GL_INDEX_BITS=$0D51
Const GL_INDEX_CLEAR_VALUE=$0C20
Const GL_INDEX_LOGIC_OP=$0BF1
Const GL_INDEX_MODE=$0C30
Const GL_INDEX_OFFSET=$0D13
Const GL_INDEX_SHIFT=$0D12
Const GL_INDEX_WRITEMASK=$0C21
Const GL_INFO_LOG_LENGTH=$8B84
Const GL_INNOCENT_CONTEXT_RESET_ARB=$8254
Const GL_INT=$1404
Const GL_INTENSITY=$8049
Const GL_INTENSITY12=$804C
Const GL_INTENSITY16=$804D
Const GL_INTENSITY4=$804A
Const GL_INTENSITY8=$804B
Const GL_INTERLEAVED_ATTRIBS=$8C8C
Const GL_INTERPOLATE=$8575
Const GL_INT_2_10_10_10_REV=$8D9F
Const GL_INT_SAMPLER_1D=$8DC9
Const GL_INT_SAMPLER_1D_ARRAY=$8DCE
Const GL_INT_SAMPLER_2D=$8DCA
Const GL_INT_SAMPLER_2D_ARRAY=$8DCF
Const GL_INT_SAMPLER_2D_MULTISAMPLE=$9109
Const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=$910C
Const GL_INT_SAMPLER_2D_RECT=$8DCD
Const GL_INT_SAMPLER_3D=$8DCB
Const GL_INT_SAMPLER_BUFFER=$8DD0
Const GL_INT_SAMPLER_CUBE=$8DCC
Const GL_INT_VEC2=$8B53
Const GL_INT_VEC3=$8B54
Const GL_INT_VEC4=$8B55
Const GL_INVALID_ENUM=$0500
Const GL_INVALID_FRAMEBUFFER_OPERATION=$0506
Const GL_INVALID_INDEX=$FFFFFFFF
Const GL_INVALID_OPERATION=$0502
Const GL_INVALID_VALUE=$0501
Const GL_INVERT=$150A
Const GL_KEEP=$1E00
Const GL_LAST_VERTEX_CONVENTION=$8E4E
Const GL_LEFT=$0406
Const GL_LEQUAL=$0203
Const GL_LESS=$0201
Const GL_LIGHT0=$4000
Const GL_LIGHT1=$4001
Const GL_LIGHT2=$4002
Const GL_LIGHT3=$4003
Const GL_LIGHT4=$4004
Const GL_LIGHT5=$4005
Const GL_LIGHT6=$4006
Const GL_LIGHT7=$4007
Const GL_LIGHTING=$0B50
Const GL_LIGHTING_BIT=$00000040
Const GL_LIGHT_MODEL_AMBIENT=$0B53
Const GL_LIGHT_MODEL_COLOR_CONTROL=$81F8
Const GL_LIGHT_MODEL_LOCAL_VIEWER=$0B51
Const GL_LIGHT_MODEL_TWO_SIDE=$0B52
Const GL_LINE=$1B01
Const GL_LINEAR=$2601
Const GL_LINEAR_ATTENUATION=$1208
Const GL_LINEAR_MIPMAP_LINEAR=$2703
Const GL_LINEAR_MIPMAP_NEAREST=$2701
Const GL_LINES=$0001
Const GL_LINES_ADJACENCY=$000A
Const GL_LINE_BIT=$00000004
Const GL_LINE_LOOP=$0002
Const GL_LINE_RESET_TOKEN=$0707
Const GL_LINE_SMOOTH=$0B20
Const GL_LINE_SMOOTH_HINT=$0C52
Const GL_LINE_STIPPLE=$0B24
Const GL_LINE_STIPPLE_PATTERN=$0B25
Const GL_LINE_STIPPLE_REPEAT=$0B26
Const GL_LINE_STRIP=$0003
Const GL_LINE_STRIP_ADJACENCY=$000B
Const GL_LINE_TOKEN=$0702
Const GL_LINE_WIDTH=$0B21
Const GL_LINE_WIDTH_GRANULARITY=$0B23
Const GL_LINE_WIDTH_RANGE=$0B22
Const GL_LINK_STATUS=$8B82
Const GL_LIST_BASE=$0B32
Const GL_LIST_BIT=$00020000
Const GL_LIST_INDEX=$0B33
Const GL_LIST_MODE=$0B30
Const GL_LOAD=$0101
Const GL_LOGIC_OP=$0BF1
Const GL_LOGIC_OP_MODE=$0BF0
Const GL_LOSE_CONTEXT_ON_RESET_ARB=$8252
Const GL_LOWER_LEFT=$8CA1
Const GL_LUMINANCE=$1909
Const GL_LUMINANCE12=$8041
Const GL_LUMINANCE12_ALPHA12=$8047
Const GL_LUMINANCE12_ALPHA4=$8046
Const GL_LUMINANCE16=$8042
Const GL_LUMINANCE16_ALPHA16=$8048
Const GL_LUMINANCE4=$803F
Const GL_LUMINANCE4_ALPHA4=$8043
Const GL_LUMINANCE6_ALPHA2=$8044
Const GL_LUMINANCE8=$8040
Const GL_LUMINANCE8_ALPHA8=$8045
Const GL_LUMINANCE_ALPHA=$190A
Const GL_MAJOR_VERSION=$821B
Const GL_MAP1_COLOR_4=$0D90
Const GL_MAP1_GRID_DOMAIN=$0DD0
Const GL_MAP1_GRID_SEGMENTS=$0DD1
Const GL_MAP1_INDEX=$0D91
Const GL_MAP1_NORMAL=$0D92
Const GL_MAP1_TEXTURE_COORD_1=$0D93
Const GL_MAP1_TEXTURE_COORD_2=$0D94
Const GL_MAP1_TEXTURE_COORD_3=$0D95
Const GL_MAP1_TEXTURE_COORD_4=$0D96
Const GL_MAP1_VERTEX_3=$0D97
Const GL_MAP1_VERTEX_4=$0D98
Const GL_MAP2_COLOR_4=$0DB0
Const GL_MAP2_GRID_DOMAIN=$0DD2
Const GL_MAP2_GRID_SEGMENTS=$0DD3
Const GL_MAP2_INDEX=$0DB1
Const GL_MAP2_NORMAL=$0DB2
Const GL_MAP2_TEXTURE_COORD_1=$0DB3
Const GL_MAP2_TEXTURE_COORD_2=$0DB4
Const GL_MAP2_TEXTURE_COORD_3=$0DB5
Const GL_MAP2_TEXTURE_COORD_4=$0DB6
Const GL_MAP2_VERTEX_3=$0DB7
Const GL_MAP2_VERTEX_4=$0DB8
Const GL_MAP_COLOR=$0D10
Const GL_MAP_FLUSH_EXPLICIT_BIT=$0010
Const GL_MAP_INVALIDATE_BUFFER_BIT=$0008
Const GL_MAP_INVALIDATE_RANGE_BIT=$0004
Const GL_MAP_READ_BIT=$0001
Const GL_MAP_STENCIL=$0D11
Const GL_MAP_UNSYNCHRONIZED_BIT=$0020
Const GL_MAP_WRITE_BIT=$0002
Const GL_MATRIX_MODE=$0BA0
Const GL_MAX=$8008
Const GL_MAX_3D_TEXTURE_SIZE=$8073
Const GL_MAX_ARRAY_TEXTURE_LAYERS=$88FF
Const GL_MAX_ATTRIB_STACK_DEPTH=$0D35
Const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH=$0D3B
Const GL_MAX_CLIP_DISTANCES=$0D32
Const GL_MAX_CLIP_PLANES=$0D32
Const GL_MAX_COLOR_ATTACHMENTS=$8CDF
Const GL_MAX_COLOR_TEXTURE_SAMPLES=$910E
Const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS=$8A33
Const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS=$8A32
Const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS=$8B4D
Const GL_MAX_COMBINED_UNIFORM_BLOCKS=$8A2E
Const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS=$8A31
Const GL_MAX_CUBE_MAP_TEXTURE_SIZE=$851C
Const GL_MAX_DEBUG_GROUP_STACK_DEPTH=$826C
Const GL_MAX_DEBUG_LOGGED_MESSAGES=$9144
Const GL_MAX_DEBUG_MESSAGE_LENGTH=$9143
Const GL_MAX_DEPTH_TEXTURE_SAMPLES=$910F
Const GL_MAX_DRAW_BUFFERS=$8824
Const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS=$88FC
Const GL_MAX_ELEMENTS_INDICES=$80E9
Const GL_MAX_ELEMENTS_VERTICES=$80E8
Const GL_MAX_EVAL_ORDER=$0D30
Const GL_MAX_FRAGMENT_INPUT_COMPONENTS=$9125
Const GL_MAX_FRAGMENT_UNIFORM_BLOCKS=$8A2D
Const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS=$8B49
Const GL_MAX_GEOMETRY_INPUT_COMPONENTS=$9123
Const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS=$9124
Const GL_MAX_GEOMETRY_OUTPUT_VERTICES=$8DE0
Const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS=$8C29
Const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS=$8DE1
Const GL_MAX_GEOMETRY_UNIFORM_BLOCKS=$8A2C
Const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS=$8DDF
Const GL_MAX_INTEGER_SAMPLES=$9110
Const GL_MAX_LABEL_LENGTH=$82E8
Const GL_MAX_LIGHTS=$0D31
Const GL_MAX_LIST_NESTING=$0B31
Const GL_MAX_MODELVIEW_STACK_DEPTH=$0D36
Const GL_MAX_NAME_STACK_DEPTH=$0D37
Const GL_MAX_PIXEL_MAP_TABLE=$0D34
Const GL_MAX_PROGRAM_TEXEL_OFFSET=$8905
Const GL_MAX_PROJECTION_STACK_DEPTH=$0D38
Const GL_MAX_RECTANGLE_TEXTURE_SIZE=$84F8
Const GL_MAX_RENDERBUFFER_SIZE=$84E8
Const GL_MAX_SAMPLES=$8D57
Const GL_MAX_SAMPLE_MASK_WORDS=$8E59
Const GL_MAX_SERVER_WAIT_TIMEOUT=$9111
Const GL_MAX_TEXTURE_BUFFER_SIZE=$8C2B
Const GL_MAX_TEXTURE_COORDS=$8871
Const GL_MAX_TEXTURE_IMAGE_UNITS=$8872
Const GL_MAX_TEXTURE_LOD_BIAS=$84FD
Const GL_MAX_TEXTURE_SIZE=$0D33
Const GL_MAX_TEXTURE_STACK_DEPTH=$0D39
Const GL_MAX_TEXTURE_UNITS=$84E2
Const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS=$8C8A
Const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS=$8C8B
Const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS=$8C80
Const GL_MAX_UNIFORM_BLOCK_SIZE=$8A30
Const GL_MAX_UNIFORM_BUFFER_BINDINGS=$8A2F
Const GL_MAX_VARYING_COMPONENTS=$8B4B
Const GL_MAX_VARYING_FLOATS=$8B4B
Const GL_MAX_VERTEX_ATTRIBS=$8869
Const GL_MAX_VERTEX_OUTPUT_COMPONENTS=$9122
Const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS=$8B4C
Const GL_MAX_VERTEX_UNIFORM_BLOCKS=$8A2B
Const GL_MAX_VERTEX_UNIFORM_COMPONENTS=$8B4A
Const GL_MAX_VIEWPORT_DIMS=$0D3A
Const GL_MIN=$8007
Const GL_MINOR_VERSION=$821C
Const GL_MIN_PROGRAM_TEXEL_OFFSET=$8904
Const GL_MIRRORED_REPEAT=$8370
Const GL_MODELVIEW=$1700
Const GL_MODELVIEW_MATRIX=$0BA6
Const GL_MODELVIEW_STACK_DEPTH=$0BA3
Const GL_MODULATE=$2100
Const GL_MULT=$0103
Const GL_MULTISAMPLE=$809D
Const GL_MULTISAMPLE_ARB=$809D
Const GL_MULTISAMPLE_BIT=$20000000
Const GL_MULTISAMPLE_BIT_ARB=$20000000
Const GL_N3F_V3F=$2A25
Const GL_NAME_STACK_DEPTH=$0D70
Const GL_NAND=$150E
Const GL_NEAREST=$2600
Const GL_NEAREST_MIPMAP_LINEAR=$2702
Const GL_NEAREST_MIPMAP_NEAREST=$2700
Const GL_NEVER=$0200
Const GL_NICEST=$1102
Const GL_NONE=0
Const GL_NOOP=$1505
Const GL_NOR=$1508
Const GL_NORMALIZE=$0BA1
Const GL_NORMAL_ARRAY=$8075
Const GL_NORMAL_ARRAY_BUFFER_BINDING=$8897
Const GL_NORMAL_ARRAY_POINTER=$808F
Const GL_NORMAL_ARRAY_STRIDE=$807F
Const GL_NORMAL_ARRAY_TYPE=$807E
Const GL_NORMAL_MAP=$8511
Const GL_NOTEQUAL=$0205
Const GL_NO_ERROR=0
Const GL_NO_RESET_NOTIFICATION_ARB=$8261
Const GL_NUM_COMPRESSED_TEXTURE_FORMATS=$86A2
Const GL_NUM_EXTENSIONS=$821D
Const GL_OBJECT_LINEAR=$2401
Const GL_OBJECT_PLANE=$2501
Const GL_OBJECT_TYPE=$9112
Const GL_ONE=1
Const GL_ONE_MINUS_CONSTANT_ALPHA=$8004
Const GL_ONE_MINUS_CONSTANT_COLOR=$8002
Const GL_ONE_MINUS_DST_ALPHA=$0305
Const GL_ONE_MINUS_DST_COLOR=$0307
Const GL_ONE_MINUS_SRC1_ALPHA=$88FB
Const GL_ONE_MINUS_SRC1_COLOR=$88FA
Const GL_ONE_MINUS_SRC_ALPHA=$0303
Const GL_ONE_MINUS_SRC_COLOR=$0301
Const GL_OPERAND0_ALPHA=$8598
Const GL_OPERAND0_RGB=$8590
Const GL_OPERAND1_ALPHA=$8599
Const GL_OPERAND1_RGB=$8591
Const GL_OPERAND2_ALPHA=$859A
Const GL_OPERAND2_RGB=$8592
Const GL_OR=$1507
Const GL_ORDER=$0A01
Const GL_OR_INVERTED=$150D
Const GL_OR_REVERSE=$150B
Const GL_OUT_OF_MEMORY=$0505
Const GL_PACK_ALIGNMENT=$0D05
Const GL_PACK_IMAGE_HEIGHT=$806C
Const GL_PACK_LSB_FIRST=$0D01
Const GL_PACK_ROW_LENGTH=$0D02
Const GL_PACK_SKIP_IMAGES=$806B
Const GL_PACK_SKIP_PIXELS=$0D04
Const GL_PACK_SKIP_ROWS=$0D03
Const GL_PACK_SWAP_BYTES=$0D00
Const GL_PASS_THROUGH_TOKEN=$0700
Const GL_PERSPECTIVE_CORRECTION_HINT=$0C50
Const GL_PIXEL_MAP_A_TO_A=$0C79
Const GL_PIXEL_MAP_A_TO_A_SIZE=$0CB9
Const GL_PIXEL_MAP_B_TO_B=$0C78
Const GL_PIXEL_MAP_B_TO_B_SIZE=$0CB8
Const GL_PIXEL_MAP_G_TO_G=$0C77
Const GL_PIXEL_MAP_G_TO_G_SIZE=$0CB7
Const GL_PIXEL_MAP_I_TO_A=$0C75
Const GL_PIXEL_MAP_I_TO_A_SIZE=$0CB5
Const GL_PIXEL_MAP_I_TO_B=$0C74
Const GL_PIXEL_MAP_I_TO_B_SIZE=$0CB4
Const GL_PIXEL_MAP_I_TO_G=$0C73
Const GL_PIXEL_MAP_I_TO_G_SIZE=$0CB3
Const GL_PIXEL_MAP_I_TO_I=$0C70
Const GL_PIXEL_MAP_I_TO_I_SIZE=$0CB0
Const GL_PIXEL_MAP_I_TO_R=$0C72
Const GL_PIXEL_MAP_I_TO_R_SIZE=$0CB2
Const GL_PIXEL_MAP_R_TO_R=$0C76
Const GL_PIXEL_MAP_R_TO_R_SIZE=$0CB6
Const GL_PIXEL_MAP_S_TO_S=$0C71
Const GL_PIXEL_MAP_S_TO_S_SIZE=$0CB1
Const GL_PIXEL_MODE_BIT=$00000020
Const GL_PIXEL_PACK_BUFFER=$88EB
Const GL_PIXEL_PACK_BUFFER_BINDING=$88ED
Const GL_PIXEL_UNPACK_BUFFER=$88EC
Const GL_PIXEL_UNPACK_BUFFER_BINDING=$88EF
Const GL_POINT=$1B00
Const GL_POINTS=$0000
Const GL_POINT_BIT=$00000002
Const GL_POINT_DISTANCE_ATTENUATION=$8129
Const GL_POINT_FADE_THRESHOLD_SIZE=$8128
Const GL_POINT_SIZE=$0B11
Const GL_POINT_SIZE_GRANULARITY=$0B13
Const GL_POINT_SIZE_MAX=$8127
Const GL_POINT_SIZE_MIN=$8126
Const GL_POINT_SIZE_RANGE=$0B12
Const GL_POINT_SMOOTH=$0B10
Const GL_POINT_SMOOTH_HINT=$0C51
Const GL_POINT_SPRITE=$8861
Const GL_POINT_SPRITE_COORD_ORIGIN=$8CA0
Const GL_POINT_TOKEN=$0701
Const GL_POLYGON=$0009
Const GL_POLYGON_BIT=$00000008
Const GL_POLYGON_MODE=$0B40
Const GL_POLYGON_OFFSET_FACTOR=$8038
Const GL_POLYGON_OFFSET_FILL=$8037
Const GL_POLYGON_OFFSET_LINE=$2A02
Const GL_POLYGON_OFFSET_POINT=$2A01
Const GL_POLYGON_OFFSET_UNITS=$2A00
Const GL_POLYGON_SMOOTH=$0B41
Const GL_POLYGON_SMOOTH_HINT=$0C53
Const GL_POLYGON_STIPPLE=$0B42
Const GL_POLYGON_STIPPLE_BIT=$00000010
Const GL_POLYGON_TOKEN=$0703
Const GL_POSITION=$1203
Const GL_PREVIOUS=$8578
Const GL_PRIMARY_COLOR=$8577
Const GL_PRIMITIVES_GENERATED=$8C87
Const GL_PRIMITIVE_RESTART=$8F9D
Const GL_PRIMITIVE_RESTART_INDEX=$8F9E
Const GL_PROGRAM=$82E2
Const GL_PROGRAM_PIPELINE=$82E4
Const GL_PROGRAM_POINT_SIZE=$8642
Const GL_PROJECTION=$1701
Const GL_PROJECTION_MATRIX=$0BA7
Const GL_PROJECTION_STACK_DEPTH=$0BA4
Const GL_PROVOKING_VERTEX=$8E4F
Const GL_PROXY_TEXTURE_1D=$8063
Const GL_PROXY_TEXTURE_1D_ARRAY=$8C19
Const GL_PROXY_TEXTURE_2D=$8064
Const GL_PROXY_TEXTURE_2D_ARRAY=$8C1B
Const GL_PROXY_TEXTURE_2D_MULTISAMPLE=$9101
Const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY=$9103
Const GL_PROXY_TEXTURE_3D=$8070
Const GL_PROXY_TEXTURE_CUBE_MAP=$851B
Const GL_PROXY_TEXTURE_RECTANGLE=$84F7
Const GL_Q=$2003
Const GL_QUADRATIC_ATTENUATION=$1209
Const GL_QUADS=$0007
Const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION=$8E4C
Const GL_QUAD_STRIP=$0008
Const GL_QUERY=$82E3
Const GL_QUERY_BY_REGION_NO_WAIT=$8E16
Const GL_QUERY_BY_REGION_WAIT=$8E15
Const GL_QUERY_COUNTER_BITS=$8864
Const GL_QUERY_NO_WAIT=$8E14
Const GL_QUERY_RESULT=$8866
Const GL_QUERY_RESULT_AVAILABLE=$8867
Const GL_QUERY_WAIT=$8E13
Const GL_R=$2002
Const GL_R11F_G11F_B10F=$8C3A
Const GL_R16=$822A
Const GL_R16F=$822D
Const GL_R16I=$8233
Const GL_R16UI=$8234
Const GL_R16_SNORM=$8F98
Const GL_R32F=$822E
Const GL_R32I=$8235
Const GL_R32UI=$8236
Const GL_R3_G3_B2=$2A10
Const GL_R8=$8229
Const GL_R8I=$8231
Const GL_R8UI=$8232
Const GL_R8_SNORM=$8F94
Const GL_RASTERIZER_DISCARD=$8C89
Const GL_READ_BUFFER=$0C02
Const GL_READ_FRAMEBUFFER=$8CA8
Const GL_READ_FRAMEBUFFER_BINDING=$8CAA
Const GL_READ_ONLY=$88B8
Const GL_READ_WRITE=$88BA
Const GL_RED=$1903
Const GL_RED_BIAS=$0D15
Const GL_RED_BITS=$0D52
Const GL_RED_INTEGER=$8D94
Const GL_RED_SCALE=$0D14
Const GL_REFLECTION_MAP=$8512
Const GL_RENDER=$1C00
Const GL_RENDERBUFFER=$8D41
Const GL_RENDERBUFFER_ALPHA_SIZE=$8D53
Const GL_RENDERBUFFER_BINDING=$8CA7
Const GL_RENDERBUFFER_BLUE_SIZE=$8D52
Const GL_RENDERBUFFER_DEPTH_SIZE=$8D54
Const GL_RENDERBUFFER_GREEN_SIZE=$8D51
Const GL_RENDERBUFFER_HEIGHT=$8D43
Const GL_RENDERBUFFER_INTERNAL_FORMAT=$8D44
Const GL_RENDERBUFFER_RED_SIZE=$8D50
Const GL_RENDERBUFFER_SAMPLES=$8CAB
Const GL_RENDERBUFFER_STENCIL_SIZE=$8D55
Const GL_RENDERBUFFER_WIDTH=$8D42
Const GL_RENDERER=$1F01
Const GL_RENDER_MODE=$0C40
Const GL_REPEAT=$2901
Const GL_REPLACE=$1E01
Const GL_RESCALE_NORMAL=$803A
Const GL_RESET_NOTIFICATION_STRATEGY_ARB=$8256
Const GL_RETURN=$0102
Const GL_RG=$8227
Const GL_RG16=$822C
Const GL_RG16F=$822F
Const GL_RG16I=$8239
Const GL_RG16UI=$823A
Const GL_RG16_SNORM=$8F99
Const GL_RG32F=$8230
Const GL_RG32I=$823B
Const GL_RG32UI=$823C
Const GL_RG8=$822B
Const GL_RG8I=$8237
Const GL_RG8UI=$8238
Const GL_RG8_SNORM=$8F95
Const GL_RGB=$1907
Const GL_RGB10=$8052
Const GL_RGB10_A2=$8059
Const GL_RGB10_A2UI=$906F
Const GL_RGB12=$8053
Const GL_RGB16=$8054
Const GL_RGB16F=$881B
Const GL_RGB16I=$8D89
Const GL_RGB16UI=$8D77
Const GL_RGB16_SNORM=$8F9A
Const GL_RGB32F=$8815
Const GL_RGB32I=$8D83
Const GL_RGB32UI=$8D71
Const GL_RGB4=$804F
Const GL_RGB5=$8050
Const GL_RGB5_A1=$8057
Const GL_RGB8=$8051
Const GL_RGB8I=$8D8F
Const GL_RGB8UI=$8D7D
Const GL_RGB8_SNORM=$8F96
Const GL_RGB9_E5=$8C3D
Const GL_RGBA=$1908
Const GL_RGBA12=$805A
Const GL_RGBA16=$805B
Const GL_RGBA16F=$881A
Const GL_RGBA16I=$8D88
Const GL_RGBA16UI=$8D76
Const GL_RGBA16_SNORM=$8F9B
Const GL_RGBA2=$8055
Const GL_RGBA32F=$8814
Const GL_RGBA32I=$8D82
Const GL_RGBA32UI=$8D70
Const GL_RGBA4=$8056
Const GL_RGBA8=$8058
Const GL_RGBA8I=$8D8E
Const GL_RGBA8UI=$8D7C
Const GL_RGBA8_SNORM=$8F97
Const GL_RGBA_INTEGER=$8D99
Const GL_RGBA_MODE=$0C31
Const GL_RGB_INTEGER=$8D98
Const GL_RGB_SCALE=$8573
Const GL_RG_INTEGER=$8228
Const GL_RIGHT=$0407
Const GL_S=$2000
Const GL_SAMPLER=$82E6
Const GL_SAMPLER_1D=$8B5D
Const GL_SAMPLER_1D_ARRAY=$8DC0
Const GL_SAMPLER_1D_ARRAY_SHADOW=$8DC3
Const GL_SAMPLER_1D_SHADOW=$8B61
Const GL_SAMPLER_2D=$8B5E
Const GL_SAMPLER_2D_ARRAY=$8DC1
Const GL_SAMPLER_2D_ARRAY_SHADOW=$8DC4
Const GL_SAMPLER_2D_MULTISAMPLE=$9108
Const GL_SAMPLER_2D_MULTISAMPLE_ARRAY=$910B
Const GL_SAMPLER_2D_RECT=$8B63
Const GL_SAMPLER_2D_RECT_SHADOW=$8B64
Const GL_SAMPLER_2D_SHADOW=$8B62
Const GL_SAMPLER_3D=$8B5F
Const GL_SAMPLER_BINDING=$8919
Const GL_SAMPLER_BUFFER=$8DC2
Const GL_SAMPLER_CUBE=$8B60
Const GL_SAMPLER_CUBE_SHADOW=$8DC5
Const GL_SAMPLES=$80A9
Const GL_SAMPLES_ARB=$80A9
Const GL_SAMPLES_PASSED=$8914
Const GL_SAMPLE_ALPHA_TO_COVERAGE=$809E
Const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB=$809E
Const GL_SAMPLE_ALPHA_TO_ONE=$809F
Const GL_SAMPLE_ALPHA_TO_ONE_ARB=$809F
Const GL_SAMPLE_BUFFERS=$80A8
Const GL_SAMPLE_BUFFERS_ARB=$80A8
Const GL_SAMPLE_COVERAGE=$80A0
Const GL_SAMPLE_COVERAGE_ARB=$80A0
Const GL_SAMPLE_COVERAGE_INVERT=$80AB
Const GL_SAMPLE_COVERAGE_INVERT_ARB=$80AB
Const GL_SAMPLE_COVERAGE_VALUE=$80AA
Const GL_SAMPLE_COVERAGE_VALUE_ARB=$80AA
Const GL_SAMPLE_MASK=$8E51
Const GL_SAMPLE_MASK_VALUE=$8E52
Const GL_SAMPLE_POSITION=$8E50
Const GL_SCISSOR_BIT=$00080000
Const GL_SCISSOR_BOX=$0C10
Const GL_SCISSOR_TEST=$0C11
Const GL_SECONDARY_COLOR_ARRAY=$845E
Const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING=$889C
Const GL_SECONDARY_COLOR_ARRAY_POINTER=$845D
Const GL_SECONDARY_COLOR_ARRAY_SIZE=$845A
Const GL_SECONDARY_COLOR_ARRAY_STRIDE=$845C
Const GL_SECONDARY_COLOR_ARRAY_TYPE=$845B
Const GL_SELECT=$1C02
Const GL_SELECTION_BUFFER_POINTER=$0DF3
Const GL_SELECTION_BUFFER_SIZE=$0DF4
Const GL_SEPARATE_ATTRIBS=$8C8D
Const GL_SEPARATE_SPECULAR_COLOR=$81FA
Const GL_SET=$150F
Const GL_SHADER=$82E1
Const GL_SHADER_SOURCE_LENGTH=$8B88
Const GL_SHADER_TYPE=$8B4F
Const GL_SHADE_MODEL=$0B54
Const GL_SHADING_LANGUAGE_VERSION=$8B8C
Const GL_SHININESS=$1601
Const GL_SHORT=$1402
Const GL_SIGNALED=$9119
Const GL_SIGNED_NORMALIZED=$8F9C
Const GL_SINGLE_COLOR=$81F9
Const GL_SLUMINANCE=$8C46
Const GL_SLUMINANCE8=$8C47
Const GL_SLUMINANCE8_ALPHA8=$8C45
Const GL_SLUMINANCE_ALPHA=$8C44
Const GL_SMOOTH=$1D01
Const GL_SMOOTH_LINE_WIDTH_GRANULARITY=$0B23
Const GL_SMOOTH_LINE_WIDTH_RANGE=$0B22
Const GL_SMOOTH_POINT_SIZE_GRANULARITY=$0B13
Const GL_SMOOTH_POINT_SIZE_RANGE=$0B12
Const GL_SOURCE0_ALPHA=$8588
Const GL_SOURCE0_RGB=$8580
Const GL_SOURCE1_ALPHA=$8589
Const GL_SOURCE1_RGB=$8581
Const GL_SOURCE2_ALPHA=$858A
Const GL_SOURCE2_RGB=$8582
Const GL_SPECULAR=$1202
Const GL_SPHERE_MAP=$2402
Const GL_SPOT_CUTOFF=$1206
Const GL_SPOT_DIRECTION=$1204
Const GL_SPOT_EXPONENT=$1205
Const GL_SRC0_ALPHA=$8588
Const GL_SRC0_RGB=$8580
Const GL_SRC1_ALPHA=$8589
Const GL_SRC1_COLOR=$88F9
Const GL_SRC1_RGB=$8581
Const GL_SRC2_ALPHA=$858A
Const GL_SRC2_RGB=$8582
Const GL_SRC_ALPHA=$0302
Const GL_SRC_ALPHA_SATURATE=$0308
Const GL_SRC_COLOR=$0300
Const GL_SRGB=$8C40
Const GL_SRGB8=$8C41
Const GL_SRGB8_ALPHA8=$8C43
Const GL_SRGB_ALPHA=$8C42
Const GL_STACK_OVERFLOW=$0503
Const GL_STACK_UNDERFLOW=$0504
Const GL_STATIC_COPY=$88E6
Const GL_STATIC_DRAW=$88E4
Const GL_STATIC_READ=$88E5
Const GL_STENCIL=$1802
Const GL_STENCIL_ATTACHMENT=$8D20
Const GL_STENCIL_BACK_FAIL=$8801
Const GL_STENCIL_BACK_FUNC=$8800
Const GL_STENCIL_BACK_PASS_DEPTH_FAIL=$8802
Const GL_STENCIL_BACK_PASS_DEPTH_PASS=$8803
Const GL_STENCIL_BACK_REF=$8CA3
Const GL_STENCIL_BACK_VALUE_MASK=$8CA4
Const GL_STENCIL_BACK_WRITEMASK=$8CA5
Const GL_STENCIL_BITS=$0D57
Const GL_STENCIL_BUFFER_BIT=$00000400
Const GL_STENCIL_CLEAR_VALUE=$0B91
Const GL_STENCIL_FAIL=$0B94
Const GL_STENCIL_FUNC=$0B92
Const GL_STENCIL_INDEX=$1901
Const GL_STENCIL_INDEX1=$8D46
Const GL_STENCIL_INDEX16=$8D49
Const GL_STENCIL_INDEX4=$8D47
Const GL_STENCIL_INDEX8=$8D48
Const GL_STENCIL_PASS_DEPTH_FAIL=$0B95
Const GL_STENCIL_PASS_DEPTH_PASS=$0B96
Const GL_STENCIL_REF=$0B97
Const GL_STENCIL_TEST=$0B90
Const GL_STENCIL_VALUE_MASK=$0B93
Const GL_STENCIL_WRITEMASK=$0B98
Const GL_STEREO=$0C33
Const GL_STREAM_COPY=$88E2
Const GL_STREAM_DRAW=$88E0
Const GL_STREAM_READ=$88E1
Const GL_SUBPIXEL_BITS=$0D50
Const GL_SUBTRACT=$84E7
Const GL_SYNC_CONDITION=$9113
Const GL_SYNC_FENCE=$9116
Const GL_SYNC_FLAGS=$9115
Const GL_SYNC_FLUSH_COMMANDS_BIT=$00000001
Const GL_SYNC_GPU_COMMANDS_COMPLETE=$9117
Const GL_SYNC_STATUS=$9114
Const GL_T=$2001
Const GL_T2F_C3F_V3F=$2A2A
Const GL_T2F_C4F_N3F_V3F=$2A2C
Const GL_T2F_C4UB_V3F=$2A29
Const GL_T2F_N3F_V3F=$2A2B
Const GL_T2F_V3F=$2A27
Const GL_T4F_C4F_N3F_V4F=$2A2D
Const GL_T4F_V4F=$2A28
Const GL_TEXTURE=$1702
Const GL_TEXTURE0=$84C0
Const GL_TEXTURE1=$84C1
Const GL_TEXTURE10=$84CA
Const GL_TEXTURE11=$84CB
Const GL_TEXTURE12=$84CC
Const GL_TEXTURE13=$84CD
Const GL_TEXTURE14=$84CE
Const GL_TEXTURE15=$84CF
Const GL_TEXTURE16=$84D0
Const GL_TEXTURE17=$84D1
Const GL_TEXTURE18=$84D2
Const GL_TEXTURE19=$84D3
Const GL_TEXTURE2=$84C2
Const GL_TEXTURE20=$84D4
Const GL_TEXTURE21=$84D5
Const GL_TEXTURE22=$84D6
Const GL_TEXTURE23=$84D7
Const GL_TEXTURE24=$84D8
Const GL_TEXTURE25=$84D9
Const GL_TEXTURE26=$84DA
Const GL_TEXTURE27=$84DB
Const GL_TEXTURE28=$84DC
Const GL_TEXTURE29=$84DD
Const GL_TEXTURE3=$84C3
Const GL_TEXTURE30=$84DE
Const GL_TEXTURE31=$84DF
Const GL_TEXTURE4=$84C4
Const GL_TEXTURE5=$84C5
Const GL_TEXTURE6=$84C6
Const GL_TEXTURE7=$84C7
Const GL_TEXTURE8=$84C8
Const GL_TEXTURE9=$84C9
Const GL_TEXTURE_1D=$0DE0
Const GL_TEXTURE_1D_ARRAY=$8C18
Const GL_TEXTURE_2D=$0DE1
Const GL_TEXTURE_2D_ARRAY=$8C1A
Const GL_TEXTURE_2D_MULTISAMPLE=$9100
Const GL_TEXTURE_2D_MULTISAMPLE_ARRAY=$9102
Const GL_TEXTURE_3D=$806F
Const GL_TEXTURE_ALPHA_SIZE=$805F
Const GL_TEXTURE_ALPHA_TYPE=$8C13
Const GL_TEXTURE_BASE_LEVEL=$813C
Const GL_TEXTURE_BINDING_1D=$8068
Const GL_TEXTURE_BINDING_1D_ARRAY=$8C1C
Const GL_TEXTURE_BINDING_2D=$8069
Const GL_TEXTURE_BINDING_2D_ARRAY=$8C1D
Const GL_TEXTURE_BINDING_2D_MULTISAMPLE=$9104
Const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY=$9105
Const GL_TEXTURE_BINDING_3D=$806A
Const GL_TEXTURE_BINDING_BUFFER=$8C2C
Const GL_TEXTURE_BINDING_CUBE_MAP=$8514
Const GL_TEXTURE_BINDING_RECTANGLE=$84F6
Const GL_TEXTURE_BIT=$00040000
Const GL_TEXTURE_BLUE_SIZE=$805E
Const GL_TEXTURE_BLUE_TYPE=$8C12
Const GL_TEXTURE_BORDER=$1005
Const GL_TEXTURE_BORDER_COLOR=$1004
Const GL_TEXTURE_BUFFER=$8C2A
Const GL_TEXTURE_BUFFER_DATA_STORE_BINDING=$8C2D
Const GL_TEXTURE_COMPARE_FUNC=$884D
Const GL_TEXTURE_COMPARE_MODE=$884C
Const GL_TEXTURE_COMPONENTS=$1003
Const GL_TEXTURE_COMPRESSED=$86A1
Const GL_TEXTURE_COMPRESSED_IMAGE_SIZE=$86A0
Const GL_TEXTURE_COMPRESSION_HINT=$84EF
Const GL_TEXTURE_COORD_ARRAY=$8078
Const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING=$889A
Const GL_TEXTURE_COORD_ARRAY_POINTER=$8092
Const GL_TEXTURE_COORD_ARRAY_SIZE=$8088
Const GL_TEXTURE_COORD_ARRAY_STRIDE=$808A
Const GL_TEXTURE_COORD_ARRAY_TYPE=$8089
Const GL_TEXTURE_CUBE_MAP=$8513
Const GL_TEXTURE_CUBE_MAP_NEGATIVE_X=$8516
Const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y=$8518
Const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z=$851A
Const GL_TEXTURE_CUBE_MAP_POSITIVE_X=$8515
Const GL_TEXTURE_CUBE_MAP_POSITIVE_Y=$8517
Const GL_TEXTURE_CUBE_MAP_POSITIVE_Z=$8519
Const GL_TEXTURE_CUBE_MAP_SEAMLESS=$884F
Const GL_TEXTURE_DEPTH=$8071
Const GL_TEXTURE_DEPTH_SIZE=$884A
Const GL_TEXTURE_DEPTH_TYPE=$8C16
Const GL_TEXTURE_ENV=$2300
Const GL_TEXTURE_ENV_COLOR=$2201
Const GL_TEXTURE_ENV_MODE=$2200
Const GL_TEXTURE_FILTER_CONTROL=$8500
Const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS=$9107
Const GL_TEXTURE_GEN_MODE=$2500
Const GL_TEXTURE_GEN_Q=$0C63
Const GL_TEXTURE_GEN_R=$0C62
Const GL_TEXTURE_GEN_S=$0C60
Const GL_TEXTURE_GEN_T=$0C61
Const GL_TEXTURE_GREEN_SIZE=$805D
Const GL_TEXTURE_GREEN_TYPE=$8C11
Const GL_TEXTURE_HEIGHT=$1001
Const GL_TEXTURE_INTENSITY_SIZE=$8061
Const GL_TEXTURE_INTENSITY_TYPE=$8C15
Const GL_TEXTURE_INTERNAL_FORMAT=$1003
Const GL_TEXTURE_LOD_BIAS=$8501
Const GL_TEXTURE_LUMINANCE_SIZE=$8060
Const GL_TEXTURE_LUMINANCE_TYPE=$8C14
Const GL_TEXTURE_MAG_FILTER=$2800
Const GL_TEXTURE_MATRIX=$0BA8
Const GL_TEXTURE_MAX_LEVEL=$813D
Const GL_TEXTURE_MAX_LOD=$813B
Const GL_TEXTURE_MIN_FILTER=$2801
Const GL_TEXTURE_MIN_LOD=$813A
Const GL_TEXTURE_PRIORITY=$8066
Const GL_TEXTURE_RECTANGLE=$84F5
Const GL_TEXTURE_RED_SIZE=$805C
Const GL_TEXTURE_RED_TYPE=$8C10
Const GL_TEXTURE_RESIDENT=$8067
Const GL_TEXTURE_SAMPLES=$9106
Const GL_TEXTURE_SHARED_SIZE=$8C3F
Const GL_TEXTURE_STACK_DEPTH=$0BA5
Const GL_TEXTURE_STENCIL_SIZE=$88F1
Const GL_TEXTURE_SWIZZLE_A=$8E45
Const GL_TEXTURE_SWIZZLE_B=$8E44
Const GL_TEXTURE_SWIZZLE_G=$8E43
Const GL_TEXTURE_SWIZZLE_R=$8E42
Const GL_TEXTURE_SWIZZLE_RGBA=$8E46
Const GL_TEXTURE_WIDTH=$1000
Const GL_TEXTURE_WRAP_R=$8072
Const GL_TEXTURE_WRAP_S=$2802
Const GL_TEXTURE_WRAP_T=$2803
Const GL_TIMEOUT_EXPIRED=$911B
Const GL_TIMEOUT_IGNORED=$FFFFFFFFFFFFFFFF
Const GL_TIMESTAMP=$8E28
Const GL_TIME_ELAPSED=$88BF
Const GL_TRANSFORM_BIT=$00001000
Const GL_TRANSFORM_FEEDBACK_BUFFER=$8C8E
Const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING=$8C8F
Const GL_TRANSFORM_FEEDBACK_BUFFER_MODE=$8C7F
Const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE=$8C85
Const GL_TRANSFORM_FEEDBACK_BUFFER_START=$8C84
Const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN=$8C88
Const GL_TRANSFORM_FEEDBACK_VARYINGS=$8C83
Const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH=$8C76
Const GL_TRANSPOSE_COLOR_MATRIX=$84E6
Const GL_TRANSPOSE_MODELVIEW_MATRIX=$84E3
Const GL_TRANSPOSE_PROJECTION_MATRIX=$84E4
Const GL_TRANSPOSE_TEXTURE_MATRIX=$84E5
Const GL_TRIANGLES=$0004
Const GL_TRIANGLES_ADJACENCY=$000C
Const GL_TRIANGLE_FAN=$0006
Const GL_TRIANGLE_STRIP=$0005
Const GL_TRIANGLE_STRIP_ADJACENCY=$000D
Const GL_TRUE=1
Const GL_UNIFORM_ARRAY_STRIDE=$8A3C
Const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS=$8A42
Const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES=$8A43
Const GL_UNIFORM_BLOCK_BINDING=$8A3F
Const GL_UNIFORM_BLOCK_DATA_SIZE=$8A40
Const GL_UNIFORM_BLOCK_INDEX=$8A3A
Const GL_UNIFORM_BLOCK_NAME_LENGTH=$8A41
Const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER=$8A46
Const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER=$8A45
Const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER=$8A44
Const GL_UNIFORM_BUFFER=$8A11
Const GL_UNIFORM_BUFFER_BINDING=$8A28
Const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT=$8A34
Const GL_UNIFORM_BUFFER_SIZE=$8A2A
Const GL_UNIFORM_BUFFER_START=$8A29
Const GL_UNIFORM_IS_ROW_MAJOR=$8A3E
Const GL_UNIFORM_MATRIX_STRIDE=$8A3D
Const GL_UNIFORM_NAME_LENGTH=$8A39
Const GL_UNIFORM_OFFSET=$8A3B
Const GL_UNIFORM_SIZE=$8A38
Const GL_UNIFORM_TYPE=$8A37
Const GL_UNKNOWN_CONTEXT_RESET_ARB=$8255
Const GL_UNPACK_ALIGNMENT=$0CF5
Const GL_UNPACK_IMAGE_HEIGHT=$806E
Const GL_UNPACK_LSB_FIRST=$0CF1
Const GL_UNPACK_ROW_LENGTH=$0CF2
Const GL_UNPACK_SKIP_IMAGES=$806D
Const GL_UNPACK_SKIP_PIXELS=$0CF4
Const GL_UNPACK_SKIP_ROWS=$0CF3
Const GL_UNPACK_SWAP_BYTES=$0CF0
Const GL_UNSIGNALED=$9118
Const GL_UNSIGNED_BYTE=$1401
Const GL_UNSIGNED_BYTE_2_3_3_REV=$8362
Const GL_UNSIGNED_BYTE_3_3_2=$8032
Const GL_UNSIGNED_INT=$1405
Const GL_UNSIGNED_INT_10F_11F_11F_REV=$8C3B
Const GL_UNSIGNED_INT_10_10_10_2=$8036
Const GL_UNSIGNED_INT_24_8=$84FA
Const GL_UNSIGNED_INT_2_10_10_10_REV=$8368
Const GL_UNSIGNED_INT_5_9_9_9_REV=$8C3E
Const GL_UNSIGNED_INT_8_8_8_8=$8035
Const GL_UNSIGNED_INT_8_8_8_8_REV=$8367
Const GL_UNSIGNED_INT_SAMPLER_1D=$8DD1
Const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY=$8DD6
Const GL_UNSIGNED_INT_SAMPLER_2D=$8DD2
Const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY=$8DD7
Const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE=$910A
Const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY=$910D
Const GL_UNSIGNED_INT_SAMPLER_2D_RECT=$8DD5
Const GL_UNSIGNED_INT_SAMPLER_3D=$8DD3
Const GL_UNSIGNED_INT_SAMPLER_BUFFER=$8DD8
Const GL_UNSIGNED_INT_SAMPLER_CUBE=$8DD4
Const GL_UNSIGNED_INT_VEC2=$8DC6
Const GL_UNSIGNED_INT_VEC3=$8DC7
Const GL_UNSIGNED_INT_VEC4=$8DC8
Const GL_UNSIGNED_NORMALIZED=$8C17
Const GL_UNSIGNED_SHORT=$1403
Const GL_UNSIGNED_SHORT_1_5_5_5_REV=$8366
Const GL_UNSIGNED_SHORT_4_4_4_4=$8033
Const GL_UNSIGNED_SHORT_4_4_4_4_REV=$8365
Const GL_UNSIGNED_SHORT_5_5_5_1=$8034
Const GL_UNSIGNED_SHORT_5_6_5=$8363
Const GL_UNSIGNED_SHORT_5_6_5_REV=$8364
Const GL_UPPER_LEFT=$8CA2
Const GL_V2F=$2A20
Const GL_V3F=$2A21
Const GL_VALIDATE_STATUS=$8B83
Const GL_VENDOR=$1F00
Const GL_VERSION=$1F02
Const GL_VERTEX_ARRAY=$8074
Const GL_VERTEX_ARRAY_BINDING=$85B5
Const GL_VERTEX_ARRAY_BUFFER_BINDING=$8896
Const GL_VERTEX_ARRAY_POINTER=$808E
Const GL_VERTEX_ARRAY_SIZE=$807A
Const GL_VERTEX_ARRAY_STRIDE=$807C
Const GL_VERTEX_ARRAY_TYPE=$807B
Const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=$889F
Const GL_VERTEX_ATTRIB_ARRAY_DIVISOR=$88FE
Const GL_VERTEX_ATTRIB_ARRAY_ENABLED=$8622
Const GL_VERTEX_ATTRIB_ARRAY_INTEGER=$88FD
Const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED=$886A
Const GL_VERTEX_ATTRIB_ARRAY_POINTER=$8645
Const GL_VERTEX_ATTRIB_ARRAY_SIZE=$8623
Const GL_VERTEX_ATTRIB_ARRAY_STRIDE=$8624
Const GL_VERTEX_ATTRIB_ARRAY_TYPE=$8625
Const GL_VERTEX_PROGRAM_POINT_SIZE=$8642
Const GL_VERTEX_PROGRAM_TWO_SIDE=$8643
Const GL_VERTEX_SHADER=$8B31
Const GL_VIEWPORT=$0BA2
Const GL_VIEWPORT_BIT=$00000800
Const GL_WAIT_FAILED=$911D
Const GL_WEIGHT_ARRAY_BUFFER_BINDING=$889E
Const GL_WRITE_ONLY=$88B9
Const GL_XOR=$1506
Const GL_ZERO=0
Const GL_ZOOM_X=$0D16
Const GL_ZOOM_Y=$0D17
Const GL_ARB_multisample=1
Const GL_ARB_robustness=1
Const GL_KHR_debug=1
Global glAccum(op_:Int,value_:Float)="void glad_glAccum( GLenum, GLfloat)!"
Global glActiveTexture(texture_:Int)="void glad_glActiveTexture( GLenum)!"
Global glAlphaFunc(func_:Int,ref_:Float)="void glad_glAlphaFunc( GLenum, GLfloat)!"
Global glAreTexturesResident:Byte(n_:Int,textures_:Int Ptr,residences_:Byte Ptr)="GLboolean glad_glAreTexturesResident( GLsizei,const GLuint*, GLboolean*)!"
Global glArrayElement(i_:Int)="void glad_glArrayElement( GLint)!"
Global glAttachShader(program_:Int,shader_:Int)="void glad_glAttachShader( GLuint, GLuint)!"
Global glBegin(mode_:Int)="void glad_glBegin( GLenum)!"
Global glBeginConditionalRender(id_:Int,mode_:Int)="void glad_glBeginConditionalRender( GLuint, GLenum)!"
Global glBeginQuery(target_:Int,id_:Int)="void glad_glBeginQuery( GLenum, GLuint)!"
Global glBeginTransformFeedback(primitiveMode_:Int)="void glad_glBeginTransformFeedback( GLenum)!"
Global glBindAttribLocation(program_:Int,index_:Int,name_:Byte Ptr)="void glad_glBindAttribLocation( GLuint, GLuint,const GLchar*)!"
Global glBindBuffer(target_:Int,buffer_:Int)="void glad_glBindBuffer( GLenum, GLuint)!"
Global glBindBufferBase(target_:Int,index_:Int,buffer_:Int)="void glad_glBindBufferBase( GLenum, GLuint, GLuint)!"
Global glBindBufferRange(target_:Int,index_:Int,buffer_:Int,offset_:Int,size_:Int)="void glad_glBindBufferRange( GLenum, GLuint, GLuint, GLintptr, GLsizeiptr)!"
Global glBindFragDataLocation(program_:Int,color_:Int,name_:Byte Ptr)="void glad_glBindFragDataLocation( GLuint, GLuint,const GLchar*)!"
Global glBindFragDataLocationIndexed(program_:Int,colorNumber_:Int,index_:Int,name_:Byte Ptr)="void glad_glBindFragDataLocationIndexed( GLuint, GLuint, GLuint,const GLchar*)!"
Global glBindFramebuffer(target_:Int,framebuffer_:Int)="void glad_glBindFramebuffer( GLenum, GLuint)!"
Global glBindRenderbuffer(target_:Int,renderbuffer_:Int)="void glad_glBindRenderbuffer( GLenum, GLuint)!"
Global glBindSampler(unit_:Int,sampler_:Int)="void glad_glBindSampler( GLuint, GLuint)!"
Global glBindTexture(target_:Int,texture_:Int)="void glad_glBindTexture( GLenum, GLuint)!"
Global glBindVertexArray(array_:Int)="void glad_glBindVertexArray( GLuint)!"
Global glBitmap(width_:Int,height_:Int,xorig_:Float,yorig_:Float,xmove_:Float,ymove_:Float,bitmap_:Byte Ptr)="void glad_glBitmap( GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat,const GLubyte*)!"
Global glBlendColor(red_:Float,green_:Float,blue_:Float,alpha_:Float)="void glad_glBlendColor( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glBlendEquation(mode_:Int)="void glad_glBlendEquation( GLenum)!"
Global glBlendEquationSeparate(modeRGB_:Int,modeAlpha_:Int)="void glad_glBlendEquationSeparate( GLenum, GLenum)!"
Global glBlendFunc(sfactor_:Int,dfactor_:Int)="void glad_glBlendFunc( GLenum, GLenum)!"
Global glBlendFuncSeparate(sfactorRGB_:Int,dfactorRGB_:Int,sfactorAlpha_:Int,dfactorAlpha_:Int)="void glad_glBlendFuncSeparate( GLenum, GLenum, GLenum, GLenum)!"
Global glBlitFramebuffer(srcX0_:Int,srcY0_:Int,srcX1_:Int,srcY1_:Int,dstX0_:Int,dstY0_:Int,dstX1_:Int,dstY1_:Int,mask_:Int,filter_:Int)="void glad_glBlitFramebuffer( GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum)!"
Global glBufferData(target_:Int,size_:Int,data_:Byte Ptr,usage_:Int)="void glad_glBufferData( GLenum, GLsizeiptr,const void*, GLenum)!"
Global glBufferSubData(target_:Int,offset_:Int,size_:Int,data_:Byte Ptr)="void glad_glBufferSubData( GLenum, GLintptr, GLsizeiptr,const void*)!"
Global glCallList(list_:Int)="void glad_glCallList( GLuint)!"
Global glCallLists(n_:Int,type_:Int,lists_:Byte Ptr)="void glad_glCallLists( GLsizei, GLenum,const void*)!"
Global glCheckFramebufferStatus:Int(target_:Int)="GLenum glad_glCheckFramebufferStatus( GLenum)!"
Global glClampColor(target_:Int,clamp_:Int)="void glad_glClampColor( GLenum, GLenum)!"
Global glClear(mask_:Int)="void glad_glClear( GLbitfield)!"
Global glClearAccum(red_:Float,green_:Float,blue_:Float,alpha_:Float)="void glad_glClearAccum( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glClearBufferfi(buffer_:Int,drawbuffer_:Int,depth_:Float,stencil_:Int)="void glad_glClearBufferfi( GLenum, GLint, GLfloat, GLint)!"
Global glClearBufferfv(buffer_:Int,drawbuffer_:Int,value_:Float Ptr)="void glad_glClearBufferfv( GLenum, GLint,const GLfloat*)!"
Global glClearBufferiv(buffer_:Int,drawbuffer_:Int,value_:Int Ptr)="void glad_glClearBufferiv( GLenum, GLint,const GLint*)!"
Global glClearBufferuiv(buffer_:Int,drawbuffer_:Int,value_:Int Ptr)="void glad_glClearBufferuiv( GLenum, GLint,const GLuint*)!"
Global glClearColor(red_:Float,green_:Float,blue_:Float,alpha_:Float)="void glad_glClearColor( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glClearDepth(depth_:Double)="void glad_glClearDepth( GLdouble)!"
Global glClearIndex(c_:Float)="void glad_glClearIndex( GLfloat)!"
Global glClearStencil(s_:Int)="void glad_glClearStencil( GLint)!"
Global glClientActiveTexture(texture_:Int)="void glad_glClientActiveTexture( GLenum)!"
Global glClipPlane(plane_:Int,equation_:Double Ptr)="void glad_glClipPlane( GLenum,const GLdouble*)!"
Global glColor3b(red_:Byte,green_:Byte,blue_:Byte)="void glad_glColor3b( GLbyte, GLbyte, GLbyte)!"
Global glColor3bv(v_:Byte Ptr)="void glad_glColor3bv(const GLbyte*)!"
Global glColor3d(red_:Double,green_:Double,blue_:Double)="void glad_glColor3d( GLdouble, GLdouble, GLdouble)!"
Global glColor3dv(v_:Double Ptr)="void glad_glColor3dv(const GLdouble*)!"
Global glColor3f(red_:Float,green_:Float,blue_:Float)="void glad_glColor3f( GLfloat, GLfloat, GLfloat)!"
Global glColor3fv(v_:Float Ptr)="void glad_glColor3fv(const GLfloat*)!"
Global glColor3i(red_:Int,green_:Int,blue_:Int)="void glad_glColor3i( GLint, GLint, GLint)!"
Global glColor3iv(v_:Int Ptr)="void glad_glColor3iv(const GLint*)!"
Global glColor3s(red_:Short,green_:Short,blue_:Short)="void glad_glColor3s( GLshort, GLshort, GLshort)!"
Global glColor3sv(v_:Short Ptr)="void glad_glColor3sv(const GLshort*)!"
Global glColor3ub(red_:Byte,green_:Byte,blue_:Byte)="void glad_glColor3ub( GLubyte, GLubyte, GLubyte)!"
Global glColor3ubv(v_:Byte Ptr)="void glad_glColor3ubv(const GLubyte*)!"
Global glColor3ui(red_:Int,green_:Int,blue_:Int)="void glad_glColor3ui( GLuint, GLuint, GLuint)!"
Global glColor3uiv(v_:Int Ptr)="void glad_glColor3uiv(const GLuint*)!"
Global glColor3us(red_:Short,green_:Short,blue_:Short)="void glad_glColor3us( GLushort, GLushort, GLushort)!"
Global glColor3usv(v_:Short Ptr)="void glad_glColor3usv(const GLushort*)!"
Global glColor4b(red_:Byte,green_:Byte,blue_:Byte,alpha_:Byte)="void glad_glColor4b( GLbyte, GLbyte, GLbyte, GLbyte)!"
Global glColor4bv(v_:Byte Ptr)="void glad_glColor4bv(const GLbyte*)!"
Global glColor4d(red_:Double,green_:Double,blue_:Double,alpha_:Double)="void glad_glColor4d( GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glColor4dv(v_:Double Ptr)="void glad_glColor4dv(const GLdouble*)!"
Global glColor4f(red_:Float,green_:Float,blue_:Float,alpha_:Float)="void glad_glColor4f( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glColor4fv(v_:Float Ptr)="void glad_glColor4fv(const GLfloat*)!"
Global glColor4i(red_:Int,green_:Int,blue_:Int,alpha_:Int)="void glad_glColor4i( GLint, GLint, GLint, GLint)!"
Global glColor4iv(v_:Int Ptr)="void glad_glColor4iv(const GLint*)!"
Global glColor4s(red_:Short,green_:Short,blue_:Short,alpha_:Short)="void glad_glColor4s( GLshort, GLshort, GLshort, GLshort)!"
Global glColor4sv(v_:Short Ptr)="void glad_glColor4sv(const GLshort*)!"
Global glColor4ub(red_:Byte,green_:Byte,blue_:Byte,alpha_:Byte)="void glad_glColor4ub( GLubyte, GLubyte, GLubyte, GLubyte)!"
Global glColor4ubv(v_:Byte Ptr)="void glad_glColor4ubv(const GLubyte*)!"
Global glColor4ui(red_:Int,green_:Int,blue_:Int,alpha_:Int)="void glad_glColor4ui( GLuint, GLuint, GLuint, GLuint)!"
Global glColor4uiv(v_:Int Ptr)="void glad_glColor4uiv(const GLuint*)!"
Global glColor4us(red_:Short,green_:Short,blue_:Short,alpha_:Short)="void glad_glColor4us( GLushort, GLushort, GLushort, GLushort)!"
Global glColor4usv(v_:Short Ptr)="void glad_glColor4usv(const GLushort*)!"
Global glColorMask(red_:Byte,green_:Byte,blue_:Byte,alpha_:Byte)="void glad_glColorMask( GLboolean, GLboolean, GLboolean, GLboolean)!"
Global glColorMaski(index_:Int,r_:Byte,g_:Byte,b_:Byte,a_:Byte)="void glad_glColorMaski( GLuint, GLboolean, GLboolean, GLboolean, GLboolean)!"
Global glColorMaterial(face_:Int,mode_:Int)="void glad_glColorMaterial( GLenum, GLenum)!"
Global glColorP3ui(type_:Int,color_:Int)="void glad_glColorP3ui( GLenum, GLuint)!"
Global glColorP3uiv(type_:Int,color_:Int Ptr)="void glad_glColorP3uiv( GLenum,const GLuint*)!"
Global glColorP4ui(type_:Int,color_:Int)="void glad_glColorP4ui( GLenum, GLuint)!"
Global glColorP4uiv(type_:Int,color_:Int Ptr)="void glad_glColorP4uiv( GLenum,const GLuint*)!"
Global glColorPointer(size_:Int,type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glColorPointer( GLint, GLenum, GLsizei,const void*)!"
Global glCompileShader(shader_:Int)="void glad_glCompileShader( GLuint)!"
Global glCompressedTexImage1D(target_:Int,level_:Int,internalformat_:Int,width_:Int,border_:Int,imageSize_:Int,data_:Byte Ptr)="void glad_glCompressedTexImage1D( GLenum, GLint, GLenum, GLsizei, GLint, GLsizei,const void*)!"
Global glCompressedTexImage2D(target_:Int,level_:Int,internalformat_:Int,width_:Int,height_:Int,border_:Int,imageSize_:Int,data_:Byte Ptr)="void glad_glCompressedTexImage2D( GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei,const void*)!"
Global glCompressedTexImage3D(target_:Int,level_:Int,internalformat_:Int,width_:Int,height_:Int,depth_:Int,border_:Int,imageSize_:Int,data_:Byte Ptr)="void glad_glCompressedTexImage3D( GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei,const void*)!"
Global glCompressedTexSubImage1D(target_:Int,level_:Int,xoffset_:Int,width_:Int,format_:Int,imageSize_:Int,data_:Byte Ptr)="void glad_glCompressedTexSubImage1D( GLenum, GLint, GLint, GLsizei, GLenum, GLsizei,const void*)!"
Global glCompressedTexSubImage2D(target_:Int,level_:Int,xoffset_:Int,yoffset_:Int,width_:Int,height_:Int,format_:Int,imageSize_:Int,data_:Byte Ptr)="void glad_glCompressedTexSubImage2D( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei,const void*)!"
Global glCompressedTexSubImage3D(target_:Int,level_:Int,xoffset_:Int,yoffset_:Int,zoffset_:Int,width_:Int,height_:Int,depth_:Int,format_:Int,imageSize_:Int,data_:Byte Ptr)="void glad_glCompressedTexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei,const void*)!"
Global glCopyBufferSubData(readTarget_:Int,writeTarget_:Int,readOffset_:Int,writeOffset_:Int,size_:Int)="void glad_glCopyBufferSubData( GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr)!"
Global glCopyPixels(x_:Int,y_:Int,width_:Int,height_:Int,type_:Int)="void glad_glCopyPixels( GLint, GLint, GLsizei, GLsizei, GLenum)!"
Global glCopyTexImage1D(target_:Int,level_:Int,internalformat_:Int,x_:Int,y_:Int,width_:Int,border_:Int)="void glad_glCopyTexImage1D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint)!"
Global glCopyTexImage2D(target_:Int,level_:Int,internalformat_:Int,x_:Int,y_:Int,width_:Int,height_:Int,border_:Int)="void glad_glCopyTexImage2D( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint)!"
Global glCopyTexSubImage1D(target_:Int,level_:Int,xoffset_:Int,x_:Int,y_:Int,width_:Int)="void glad_glCopyTexSubImage1D( GLenum, GLint, GLint, GLint, GLint, GLsizei)!"
Global glCopyTexSubImage2D(target_:Int,level_:Int,xoffset_:Int,yoffset_:Int,x_:Int,y_:Int,width_:Int,height_:Int)="void glad_glCopyTexSubImage2D( GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)!"
Global glCopyTexSubImage3D(target_:Int,level_:Int,xoffset_:Int,yoffset_:Int,zoffset_:Int,x_:Int,y_:Int,width_:Int,height_:Int)="void glad_glCopyTexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)!"
Global glCreateProgram:Int()="GLuint glad_glCreateProgram( void)!"
Global glCreateShader:Int(type_:Int)="GLuint glad_glCreateShader( GLenum)!"
Global glCullFace(mode_:Int)="void glad_glCullFace( GLenum)!"
Global glDebugMessageControl(source_:Int,type_:Int,severity_:Int,count_:Int,ids_:Int Ptr,enabled_:Byte)="void glad_glDebugMessageControl( GLenum, GLenum, GLenum, GLsizei,const GLuint*, GLboolean)!"
Global glDebugMessageInsert(source_:Int,type_:Int,id_:Int,severity_:Int,length_:Int,buf_:Byte Ptr)="void glad_glDebugMessageInsert( GLenum, GLenum, GLuint, GLenum, GLsizei,const GLchar*)!"
Global glDeleteBuffers(n_:Int,buffers_:Int Ptr)="void glad_glDeleteBuffers( GLsizei,const GLuint*)!"
Global glDeleteFramebuffers(n_:Int,framebuffers_:Int Ptr)="void glad_glDeleteFramebuffers( GLsizei,const GLuint*)!"
Global glDeleteLists(list_:Int,range_:Int)="void glad_glDeleteLists( GLuint, GLsizei)!"
Global glDeleteProgram(program_:Int)="void glad_glDeleteProgram( GLuint)!"
Global glDeleteQueries(n_:Int,ids_:Int Ptr)="void glad_glDeleteQueries( GLsizei,const GLuint*)!"
Global glDeleteRenderbuffers(n_:Int,renderbuffers_:Int Ptr)="void glad_glDeleteRenderbuffers( GLsizei,const GLuint*)!"
Global glDeleteSamplers(count_:Int,samplers_:Int Ptr)="void glad_glDeleteSamplers( GLsizei,const GLuint*)!"
Global glDeleteShader(shader_:Int)="void glad_glDeleteShader( GLuint)!"
Global glDeleteTextures(n_:Int,textures_:Int Ptr)="void glad_glDeleteTextures( GLsizei,const GLuint*)!"
Global glDeleteVertexArrays(n_:Int,arrays_:Int Ptr)="void glad_glDeleteVertexArrays( GLsizei,const GLuint*)!"
Global glDepthFunc(func_:Int)="void glad_glDepthFunc( GLenum)!"
Global glDepthMask(flag_:Byte)="void glad_glDepthMask( GLboolean)!"
Global glDepthRange(n_:Double,f_:Double)="void glad_glDepthRange( GLdouble, GLdouble)!"
Global glDetachShader(program_:Int,shader_:Int)="void glad_glDetachShader( GLuint, GLuint)!"
Global glDisable(cap_:Int)="void glad_glDisable( GLenum)!"
Global glDisableClientState(array_:Int)="void glad_glDisableClientState( GLenum)!"
Global glDisableVertexAttribArray(index_:Int)="void glad_glDisableVertexAttribArray( GLuint)!"
Global glDisablei(target_:Int,index_:Int)="void glad_glDisablei( GLenum, GLuint)!"
Global glDrawArrays(mode_:Int,first_:Int,count_:Int)="void glad_glDrawArrays( GLenum, GLint, GLsizei)!"
Global glDrawArraysInstanced(mode_:Int,first_:Int,count_:Int,instancecount_:Int)="void glad_glDrawArraysInstanced( GLenum, GLint, GLsizei, GLsizei)!"
Global glDrawBuffer(buf_:Int)="void glad_glDrawBuffer( GLenum)!"
Global glDrawBuffers(n_:Int,bufs_:Int Ptr)="void glad_glDrawBuffers( GLsizei,const GLenum*)!"
Global glDrawElements(mode_:Int,count_:Int,type_:Int,indices_:Byte Ptr)="void glad_glDrawElements( GLenum, GLsizei, GLenum,const void*)!"
Global glDrawElementsBaseVertex(mode_:Int,count_:Int,type_:Int,indices_:Byte Ptr,basevertex_:Int)="void glad_glDrawElementsBaseVertex( GLenum, GLsizei, GLenum,const void*, GLint)!"
Global glDrawElementsInstanced(mode_:Int,count_:Int,type_:Int,indices_:Byte Ptr,instancecount_:Int)="void glad_glDrawElementsInstanced( GLenum, GLsizei, GLenum,const void*, GLsizei)!"
Global glDrawElementsInstancedBaseVertex(mode_:Int,count_:Int,type_:Int,indices_:Byte Ptr,instancecount_:Int,basevertex_:Int)="void glad_glDrawElementsInstancedBaseVertex( GLenum, GLsizei, GLenum,const void*, GLsizei, GLint)!"
Global glDrawPixels(width_:Int,height_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glDrawPixels( GLsizei, GLsizei, GLenum, GLenum,const void*)!"
Global glDrawRangeElements(mode_:Int,start_:Int,end_:Int,count_:Int,type_:Int,indices_:Byte Ptr)="void glad_glDrawRangeElements( GLenum, GLuint, GLuint, GLsizei, GLenum,const void*)!"
Global glDrawRangeElementsBaseVertex(mode_:Int,start_:Int,end_:Int,count_:Int,type_:Int,indices_:Byte Ptr,basevertex_:Int)="void glad_glDrawRangeElementsBaseVertex( GLenum, GLuint, GLuint, GLsizei, GLenum,const void*, GLint)!"
Global glEdgeFlag(flag_:Byte)="void glad_glEdgeFlag( GLboolean)!"
Global glEdgeFlagPointer(stride_:Int,pointer_:Byte Ptr)="void glad_glEdgeFlagPointer( GLsizei,const void*)!"
Global glEdgeFlagv(flag_:Byte Ptr)="void glad_glEdgeFlagv(const GLboolean*)!"
Global glEnable(cap_:Int)="void glad_glEnable( GLenum)!"
Global glEnableClientState(array_:Int)="void glad_glEnableClientState( GLenum)!"
Global glEnableVertexAttribArray(index_:Int)="void glad_glEnableVertexAttribArray( GLuint)!"
Global glEnablei(target_:Int,index_:Int)="void glad_glEnablei( GLenum, GLuint)!"
Global glEnd()="void glad_glEnd( void)!"
Global glEndConditionalRender()="void glad_glEndConditionalRender( void)!"
Global glEndList()="void glad_glEndList( void)!"
Global glEndQuery(target_:Int)="void glad_glEndQuery( GLenum)!"
Global glEndTransformFeedback()="void glad_glEndTransformFeedback( void)!"
Global glEvalCoord1d(u_:Double)="void glad_glEvalCoord1d( GLdouble)!"
Global glEvalCoord1dv(u_:Double Ptr)="void glad_glEvalCoord1dv(const GLdouble*)!"
Global glEvalCoord1f(u_:Float)="void glad_glEvalCoord1f( GLfloat)!"
Global glEvalCoord1fv(u_:Float Ptr)="void glad_glEvalCoord1fv(const GLfloat*)!"
Global glEvalCoord2d(u_:Double,v_:Double)="void glad_glEvalCoord2d( GLdouble, GLdouble)!"
Global glEvalCoord2dv(u_:Double Ptr)="void glad_glEvalCoord2dv(const GLdouble*)!"
Global glEvalCoord2f(u_:Float,v_:Float)="void glad_glEvalCoord2f( GLfloat, GLfloat)!"
Global glEvalCoord2fv(u_:Float Ptr)="void glad_glEvalCoord2fv(const GLfloat*)!"
Global glEvalMesh1(mode_:Int,i1_:Int,i2_:Int)="void glad_glEvalMesh1( GLenum, GLint, GLint)!"
Global glEvalMesh2(mode_:Int,i1_:Int,i2_:Int,j1_:Int,j2_:Int)="void glad_glEvalMesh2( GLenum, GLint, GLint, GLint, GLint)!"
Global glEvalPoint1(i_:Int)="void glad_glEvalPoint1( GLint)!"
Global glEvalPoint2(i_:Int,j_:Int)="void glad_glEvalPoint2( GLint, GLint)!"
Global glFeedbackBuffer(size_:Int,type_:Int,buffer_:Float Ptr)="void glad_glFeedbackBuffer( GLsizei, GLenum, GLfloat*)!"
Global glFinish()="void glad_glFinish( void)!"
Global glFlush()="void glad_glFlush( void)!"
Global glFlushMappedBufferRange(target_:Int,offset_:Int,length_:Int)="void glad_glFlushMappedBufferRange( GLenum, GLintptr, GLsizeiptr)!"
Global glFogCoordPointer(type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glFogCoordPointer( GLenum, GLsizei,const void*)!"
Global glFogCoordd(coord_:Double)="void glad_glFogCoordd( GLdouble)!"
Global glFogCoorddv(coord_:Double Ptr)="void glad_glFogCoorddv(const GLdouble*)!"
Global glFogCoordf(coord_:Float)="void glad_glFogCoordf( GLfloat)!"
Global glFogCoordfv(coord_:Float Ptr)="void glad_glFogCoordfv(const GLfloat*)!"
Global glFogf(pname_:Int,param_:Float)="void glad_glFogf( GLenum, GLfloat)!"
Global glFogfv(pname_:Int,params_:Float Ptr)="void glad_glFogfv( GLenum,const GLfloat*)!"
Global glFogi(pname_:Int,param_:Int)="void glad_glFogi( GLenum, GLint)!"
Global glFogiv(pname_:Int,params_:Int Ptr)="void glad_glFogiv( GLenum,const GLint*)!"
Global glFramebufferRenderbuffer(target_:Int,attachment_:Int,renderbuffertarget_:Int,renderbuffer_:Int)="void glad_glFramebufferRenderbuffer( GLenum, GLenum, GLenum, GLuint)!"
Global glFramebufferTexture(target_:Int,attachment_:Int,texture_:Int,level_:Int)="void glad_glFramebufferTexture( GLenum, GLenum, GLuint, GLint)!"
Global glFramebufferTexture1D(target_:Int,attachment_:Int,textarget_:Int,texture_:Int,level_:Int)="void glad_glFramebufferTexture1D( GLenum, GLenum, GLenum, GLuint, GLint)!"
Global glFramebufferTexture2D(target_:Int,attachment_:Int,textarget_:Int,texture_:Int,level_:Int)="void glad_glFramebufferTexture2D( GLenum, GLenum, GLenum, GLuint, GLint)!"
Global glFramebufferTexture3D(target_:Int,attachment_:Int,textarget_:Int,texture_:Int,level_:Int,zoffset_:Int)="void glad_glFramebufferTexture3D( GLenum, GLenum, GLenum, GLuint, GLint, GLint)!"
Global glFramebufferTextureLayer(target_:Int,attachment_:Int,texture_:Int,level_:Int,layer_:Int)="void glad_glFramebufferTextureLayer( GLenum, GLenum, GLuint, GLint, GLint)!"
Global glFrontFace(mode_:Int)="void glad_glFrontFace( GLenum)!"
Global glFrustum(left_:Double,right_:Double,bottom_:Double,top_:Double,zNear_:Double,zFar_:Double)="void glad_glFrustum( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glGenBuffers(n_:Int,buffers_:Int Ptr)="void glad_glGenBuffers( GLsizei, GLuint*)!"
Global glGenFramebuffers(n_:Int,framebuffers_:Int Ptr)="void glad_glGenFramebuffers( GLsizei, GLuint*)!"
Global glGenLists:Int(range_:Int)="GLuint glad_glGenLists( GLsizei)!"
Global glGenQueries(n_:Int,ids_:Int Ptr)="void glad_glGenQueries( GLsizei, GLuint*)!"
Global glGenRenderbuffers(n_:Int,renderbuffers_:Int Ptr)="void glad_glGenRenderbuffers( GLsizei, GLuint*)!"
Global glGenSamplers(count_:Int,samplers_:Int Ptr)="void glad_glGenSamplers( GLsizei, GLuint*)!"
Global glGenTextures(n_:Int,textures_:Int Ptr)="void glad_glGenTextures( GLsizei, GLuint*)!"
Global glGenVertexArrays(n_:Int,arrays_:Int Ptr)="void glad_glGenVertexArrays( GLsizei, GLuint*)!"
Global glGenerateMipmap(target_:Int)="void glad_glGenerateMipmap( GLenum)!"
Global glGetActiveAttrib(program_:Int,index_:Int,bufSize_:Int,length_:Int Ptr,size_:Int Ptr,type_:Int Ptr,name_:Byte Ptr)="void glad_glGetActiveAttrib( GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*)!"
Global glGetActiveUniform(program_:Int,index_:Int,bufSize_:Int,length_:Int Ptr,size_:Int Ptr,type_:Int Ptr,name_:Byte Ptr)="void glad_glGetActiveUniform( GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*)!"
Global glGetActiveUniformBlockName(program_:Int,uniformBlockIndex_:Int,bufSize_:Int,length_:Int Ptr,uniformBlockName_:Byte Ptr)="void glad_glGetActiveUniformBlockName( GLuint, GLuint, GLsizei, GLsizei*, GLchar*)!"
Global glGetActiveUniformBlockiv(program_:Int,uniformBlockIndex_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetActiveUniformBlockiv( GLuint, GLuint, GLenum, GLint*)!"
Global glGetActiveUniformName(program_:Int,uniformIndex_:Int,bufSize_:Int,length_:Int Ptr,uniformName_:Byte Ptr)="void glad_glGetActiveUniformName( GLuint, GLuint, GLsizei, GLsizei*, GLchar*)!"
Global glGetActiveUniformsiv(program_:Int,uniformCount_:Int,uniformIndices_:Int Ptr,pname_:Int,params_:Int Ptr)="void glad_glGetActiveUniformsiv( GLuint, GLsizei,const GLuint*, GLenum, GLint*)!"
Global glGetAttachedShaders(program_:Int,maxCount_:Int,count_:Int Ptr,shaders_:Int Ptr)="void glad_glGetAttachedShaders( GLuint, GLsizei, GLsizei*, GLuint*)!"
Global glGetAttribLocation:Int(program_:Int,name_:Byte Ptr)="GLint glad_glGetAttribLocation( GLuint,const GLchar*)!"
Global glGetBooleani_v(target_:Int,index_:Int,data_:Byte Ptr)="void glad_glGetBooleani_v( GLenum, GLuint, GLboolean*)!"
Global glGetBooleanv(pname_:Int,data_:Byte Ptr)="void glad_glGetBooleanv( GLenum, GLboolean*)!"
Global glGetBufferParameteri64v(target_:Int,pname_:Int,params_:Long Ptr)="void glad_glGetBufferParameteri64v( GLenum, GLenum, GLint64*)!"
Global glGetBufferParameteriv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetBufferParameteriv( GLenum, GLenum, GLint*)!"
Global glGetBufferPointerv(target_:Int,pname_:Int,params_:Byte Ptr Ptr)="void glad_glGetBufferPointerv( GLenum, GLenum, void**)!"
Global glGetBufferSubData(target_:Int,offset_:Int,size_:Int,data_:Byte Ptr)="void glad_glGetBufferSubData( GLenum, GLintptr, GLsizeiptr, void*)!"
Global glGetClipPlane(plane_:Int,equation_:Double Ptr)="void glad_glGetClipPlane( GLenum, GLdouble*)!"
Global glGetCompressedTexImage(target_:Int,level_:Int,img_:Byte Ptr)="void glad_glGetCompressedTexImage( GLenum, GLint, void*)!"
Global glGetDebugMessageLog:Int(count_:Int,bufSize_:Int,sources_:Int Ptr,types_:Int Ptr,ids_:Int Ptr,severities_:Int Ptr,lengths_:Int Ptr,messageLog_:Byte Ptr)="GLuint glad_glGetDebugMessageLog( GLuint, GLsizei, GLenum*, GLenum*, GLuint*, GLenum*, GLsizei*, GLchar*)!"
Global glGetDoublev(pname_:Int,data_:Double Ptr)="void glad_glGetDoublev( GLenum, GLdouble*)!"
Global glGetError:Int()="GLenum glad_glGetError( void)!"
Global glGetFloatv(pname_:Int,data_:Float Ptr)="void glad_glGetFloatv( GLenum, GLfloat*)!"
Global glGetFragDataIndex:Int(program_:Int,name_:Byte Ptr)="GLint glad_glGetFragDataIndex( GLuint,const GLchar*)!"
Global glGetFragDataLocation:Int(program_:Int,name_:Byte Ptr)="GLint glad_glGetFragDataLocation( GLuint,const GLchar*)!"
Global glGetFramebufferAttachmentParameteriv(target_:Int,attachment_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetFramebufferAttachmentParameteriv( GLenum, GLenum, GLenum, GLint*)!"
Global glGetGraphicsResetStatusARB:Int()="GLenum glad_glGetGraphicsResetStatusARB( void)!"
Global glGetInteger64i_v(target_:Int,index_:Int,data_:Long Ptr)="void glad_glGetInteger64i_v( GLenum, GLuint, GLint64*)!"
Global glGetInteger64v(pname_:Int,data_:Long Ptr)="void glad_glGetInteger64v( GLenum, GLint64*)!"
Global glGetIntegeri_v(target_:Int,index_:Int,data_:Int Ptr)="void glad_glGetIntegeri_v( GLenum, GLuint, GLint*)!"
Global glGetIntegerv(pname_:Int,data_:Int Ptr)="void glad_glGetIntegerv( GLenum, GLint*)!"
Global glGetLightfv(light_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetLightfv( GLenum, GLenum, GLfloat*)!"
Global glGetLightiv(light_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetLightiv( GLenum, GLenum, GLint*)!"
Global glGetMapdv(target_:Int,query_:Int,v_:Double Ptr)="void glad_glGetMapdv( GLenum, GLenum, GLdouble*)!"
Global glGetMapfv(target_:Int,query_:Int,v_:Float Ptr)="void glad_glGetMapfv( GLenum, GLenum, GLfloat*)!"
Global glGetMapiv(target_:Int,query_:Int,v_:Int Ptr)="void glad_glGetMapiv( GLenum, GLenum, GLint*)!"
Global glGetMaterialfv(face_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetMaterialfv( GLenum, GLenum, GLfloat*)!"
Global glGetMaterialiv(face_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetMaterialiv( GLenum, GLenum, GLint*)!"
Global glGetMultisamplefv(pname_:Int,index_:Int,val_:Float Ptr)="void glad_glGetMultisamplefv( GLenum, GLuint, GLfloat*)!"
Global glGetObjectLabel(identifier_:Int,name_:Int,bufSize_:Int,length_:Int Ptr,label_:Byte Ptr)="void glad_glGetObjectLabel( GLenum, GLuint, GLsizei, GLsizei*, GLchar*)!"
Global glGetObjectPtrLabel(ptr_:Byte Ptr,bufSize_:Int,length_:Int Ptr,label_:Byte Ptr)="void glad_glGetObjectPtrLabel(const void*, GLsizei, GLsizei*, GLchar*)!"
Global glGetPixelMapfv(map_:Int,values_:Float Ptr)="void glad_glGetPixelMapfv( GLenum, GLfloat*)!"
Global glGetPixelMapuiv(map_:Int,values_:Int Ptr)="void glad_glGetPixelMapuiv( GLenum, GLuint*)!"
Global glGetPixelMapusv(map_:Int,values_:Short Ptr)="void glad_glGetPixelMapusv( GLenum, GLushort*)!"
Global glGetPointerv(pname_:Int,params_:Byte Ptr Ptr)="void glad_glGetPointerv( GLenum, void**)!"
Global glGetPolygonStipple(mask_:Byte Ptr)="void glad_glGetPolygonStipple( GLubyte*)!"
Global _glGetProgramInfoLog(program_:Int,bufSize_:Int,length_:Int Ptr,infoLog_:Byte Ptr)="void glad_glGetProgramInfoLog( GLuint, GLsizei, GLsizei*, GLchar*)!"
Global glGetProgramiv(program_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetProgramiv( GLuint, GLenum, GLint*)!"
Global glGetQueryObjecti64v(id_:Int,pname_:Int,params_:Long Ptr)="void glad_glGetQueryObjecti64v( GLuint, GLenum, GLint64*)!"
Global glGetQueryObjectiv(id_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetQueryObjectiv( GLuint, GLenum, GLint*)!"
Global glGetQueryObjectui64v(id_:Int,pname_:Int,params_:Long Ptr)="void glad_glGetQueryObjectui64v( GLuint, GLenum, GLuint64*)!"
Global glGetQueryObjectuiv(id_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetQueryObjectuiv( GLuint, GLenum, GLuint*)!"
Global glGetQueryiv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetQueryiv( GLenum, GLenum, GLint*)!"
Global glGetRenderbufferParameteriv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetRenderbufferParameteriv( GLenum, GLenum, GLint*)!"
Global glGetSamplerParameterIiv(sampler_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetSamplerParameterIiv( GLuint, GLenum, GLint*)!"
Global glGetSamplerParameterIuiv(sampler_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetSamplerParameterIuiv( GLuint, GLenum, GLuint*)!"
Global glGetSamplerParameterfv(sampler_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetSamplerParameterfv( GLuint, GLenum, GLfloat*)!"
Global glGetSamplerParameteriv(sampler_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetSamplerParameteriv( GLuint, GLenum, GLint*)!"
Global _glGetShaderInfoLog(shader_:Int,bufSize_:Int,length_:Int Ptr,infoLog_:Byte Ptr)="void glad_glGetShaderInfoLog( GLuint, GLsizei, GLsizei*, GLchar*)!"
Global _glGetShaderSource(shader_:Int,bufSize_:Int,length_:Int Ptr,source_:Byte Ptr)="void glad_glGetShaderSource( GLuint, GLsizei, GLsizei*, GLchar*)!"
Global glGetShaderiv(shader_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetShaderiv( GLuint, GLenum, GLint*)!"
Global glGetString:Byte Ptr(name_:Int)="const GLubyte* glad_glGetString( GLenum)!"
Global glGetStringi:Byte Ptr(name_:Int,index_:Int)="const GLubyte* glad_glGetStringi( GLenum, GLuint)!"
Global glGetTexEnvfv(target_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetTexEnvfv( GLenum, GLenum, GLfloat*)!"
Global glGetTexEnviv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetTexEnviv( GLenum, GLenum, GLint*)!"
Global glGetTexGendv(coord_:Int,pname_:Int,params_:Double Ptr)="void glad_glGetTexGendv( GLenum, GLenum, GLdouble*)!"
Global glGetTexGenfv(coord_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetTexGenfv( GLenum, GLenum, GLfloat*)!"
Global glGetTexGeniv(coord_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetTexGeniv( GLenum, GLenum, GLint*)!"
Global glGetTexImage(target_:Int,level_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glGetTexImage( GLenum, GLint, GLenum, GLenum, void*)!"
Global glGetTexLevelParameterfv(target_:Int,level_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetTexLevelParameterfv( GLenum, GLint, GLenum, GLfloat*)!"
Global glGetTexLevelParameteriv(target_:Int,level_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetTexLevelParameteriv( GLenum, GLint, GLenum, GLint*)!"
Global glGetTexParameterIiv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetTexParameterIiv( GLenum, GLenum, GLint*)!"
Global glGetTexParameterIuiv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetTexParameterIuiv( GLenum, GLenum, GLuint*)!"
Global glGetTexParameterfv(target_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetTexParameterfv( GLenum, GLenum, GLfloat*)!"
Global glGetTexParameteriv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetTexParameteriv( GLenum, GLenum, GLint*)!"
Global glGetTransformFeedbackVarying(program_:Int,index_:Int,bufSize_:Int,length_:Int Ptr,size_:Int Ptr,type_:Int Ptr,name_:Byte Ptr)="void glad_glGetTransformFeedbackVarying( GLuint, GLuint, GLsizei, GLsizei*, GLsizei*, GLenum*, GLchar*)!"
Global glGetUniformBlockIndex:Int(program_:Int,uniformBlockName_:Byte Ptr)="GLuint glad_glGetUniformBlockIndex( GLuint,const GLchar*)!"
Global glGetUniformIndices(program_:Int,uniformCount_:Int,uniformNames_:Byte Ptr Ptr,uniformIndices_:Int Ptr)="void glad_glGetUniformIndices( GLuint, GLsizei,const GLchar* const*, GLuint*)!"
Global _glGetUniformLocation:Int(program_:Int,name_:Byte Ptr)="GLint glad_glGetUniformLocation( GLuint,const GLchar*)!"
Global glGetUniformfv(program_:Int,location_:Int,params_:Float Ptr)="void glad_glGetUniformfv( GLuint, GLint, GLfloat*)!"
Global glGetUniformiv(program_:Int,location_:Int,params_:Int Ptr)="void glad_glGetUniformiv( GLuint, GLint, GLint*)!"
Global glGetUniformuiv(program_:Int,location_:Int,params_:Int Ptr)="void glad_glGetUniformuiv( GLuint, GLint, GLuint*)!"
Global glGetVertexAttribIiv(index_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetVertexAttribIiv( GLuint, GLenum, GLint*)!"
Global glGetVertexAttribIuiv(index_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetVertexAttribIuiv( GLuint, GLenum, GLuint*)!"
Global glGetVertexAttribPointerv(index_:Int,pname_:Int,pointer_:Byte Ptr Ptr)="void glad_glGetVertexAttribPointerv( GLuint, GLenum, void**)!"
Global glGetVertexAttribdv(index_:Int,pname_:Int,params_:Double Ptr)="void glad_glGetVertexAttribdv( GLuint, GLenum, GLdouble*)!"
Global glGetVertexAttribfv(index_:Int,pname_:Int,params_:Float Ptr)="void glad_glGetVertexAttribfv( GLuint, GLenum, GLfloat*)!"
Global glGetVertexAttribiv(index_:Int,pname_:Int,params_:Int Ptr)="void glad_glGetVertexAttribiv( GLuint, GLenum, GLint*)!"
Global glGetnColorTableARB(target_:Int,format_:Int,type_:Int,bufSize_:Int,table_:Byte Ptr)="void glad_glGetnColorTableARB( GLenum, GLenum, GLenum, GLsizei, void*)!"
Global glGetnCompressedTexImageARB(target_:Int,lod_:Int,bufSize_:Int,img_:Byte Ptr)="void glad_glGetnCompressedTexImageARB( GLenum, GLint, GLsizei, void*)!"
Global glGetnConvolutionFilterARB(target_:Int,format_:Int,type_:Int,bufSize_:Int,image_:Byte Ptr)="void glad_glGetnConvolutionFilterARB( GLenum, GLenum, GLenum, GLsizei, void*)!"
Global glGetnHistogramARB(target_:Int,reset_:Byte,format_:Int,type_:Int,bufSize_:Int,values_:Byte Ptr)="void glad_glGetnHistogramARB( GLenum, GLboolean, GLenum, GLenum, GLsizei, void*)!"
Global glGetnMapdvARB(target_:Int,query_:Int,bufSize_:Int,v_:Double Ptr)="void glad_glGetnMapdvARB( GLenum, GLenum, GLsizei, GLdouble*)!"
Global glGetnMapfvARB(target_:Int,query_:Int,bufSize_:Int,v_:Float Ptr)="void glad_glGetnMapfvARB( GLenum, GLenum, GLsizei, GLfloat*)!"
Global glGetnMapivARB(target_:Int,query_:Int,bufSize_:Int,v_:Int Ptr)="void glad_glGetnMapivARB( GLenum, GLenum, GLsizei, GLint*)!"
Global glGetnMinmaxARB(target_:Int,reset_:Byte,format_:Int,type_:Int,bufSize_:Int,values_:Byte Ptr)="void glad_glGetnMinmaxARB( GLenum, GLboolean, GLenum, GLenum, GLsizei, void*)!"
Global glGetnPixelMapfvARB(map_:Int,bufSize_:Int,values_:Float Ptr)="void glad_glGetnPixelMapfvARB( GLenum, GLsizei, GLfloat*)!"
Global glGetnPixelMapuivARB(map_:Int,bufSize_:Int,values_:Int Ptr)="void glad_glGetnPixelMapuivARB( GLenum, GLsizei, GLuint*)!"
Global glGetnPixelMapusvARB(map_:Int,bufSize_:Int,values_:Short Ptr)="void glad_glGetnPixelMapusvARB( GLenum, GLsizei, GLushort*)!"
Global glGetnPolygonStippleARB(bufSize_:Int,pattern_:Byte Ptr)="void glad_glGetnPolygonStippleARB( GLsizei, GLubyte*)!"
Global glGetnSeparableFilterARB(target_:Int,format_:Int,type_:Int,rowBufSize_:Int,row_:Byte Ptr,columnBufSize_:Int,column_:Byte Ptr,span_:Byte Ptr)="void glad_glGetnSeparableFilterARB( GLenum, GLenum, GLenum, GLsizei, void*, GLsizei, void*, void*)!"
Global glGetnTexImageARB(target_:Int,level_:Int,format_:Int,type_:Int,bufSize_:Int,img_:Byte Ptr)="void glad_glGetnTexImageARB( GLenum, GLint, GLenum, GLenum, GLsizei, void*)!"
Global glGetnUniformdvARB(program_:Int,location_:Int,bufSize_:Int,params_:Double Ptr)="void glad_glGetnUniformdvARB( GLuint, GLint, GLsizei, GLdouble*)!"
Global glGetnUniformfvARB(program_:Int,location_:Int,bufSize_:Int,params_:Float Ptr)="void glad_glGetnUniformfvARB( GLuint, GLint, GLsizei, GLfloat*)!"
Global glGetnUniformivARB(program_:Int,location_:Int,bufSize_:Int,params_:Int Ptr)="void glad_glGetnUniformivARB( GLuint, GLint, GLsizei, GLint*)!"
Global glGetnUniformuivARB(program_:Int,location_:Int,bufSize_:Int,params_:Int Ptr)="void glad_glGetnUniformuivARB( GLuint, GLint, GLsizei, GLuint*)!"
Global glHint(target_:Int,mode_:Int)="void glad_glHint( GLenum, GLenum)!"
Global glIndexMask(mask_:Int)="void glad_glIndexMask( GLuint)!"
Global glIndexPointer(type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glIndexPointer( GLenum, GLsizei,const void*)!"
Global glIndexd(c_:Double)="void glad_glIndexd( GLdouble)!"
Global glIndexdv(c_:Double Ptr)="void glad_glIndexdv(const GLdouble*)!"
Global glIndexf(c_:Float)="void glad_glIndexf( GLfloat)!"
Global glIndexfv(c_:Float Ptr)="void glad_glIndexfv(const GLfloat*)!"
Global glIndexi(c_:Int)="void glad_glIndexi( GLint)!"
Global glIndexiv(c_:Int Ptr)="void glad_glIndexiv(const GLint*)!"
Global glIndexs(c_:Short)="void glad_glIndexs( GLshort)!"
Global glIndexsv(c_:Short Ptr)="void glad_glIndexsv(const GLshort*)!"
Global glIndexub(c_:Byte)="void glad_glIndexub( GLubyte)!"
Global glIndexubv(c_:Byte Ptr)="void glad_glIndexubv(const GLubyte*)!"
Global glInitNames()="void glad_glInitNames( void)!"
Global glInterleavedArrays(format_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glInterleavedArrays( GLenum, GLsizei,const void*)!"
Global glIsBuffer:Byte(buffer_:Int)="GLboolean glad_glIsBuffer( GLuint)!"
Global glIsEnabled:Byte(cap_:Int)="GLboolean glad_glIsEnabled( GLenum)!"
Global glIsEnabledi:Byte(target_:Int,index_:Int)="GLboolean glad_glIsEnabledi( GLenum, GLuint)!"
Global glIsFramebuffer:Byte(framebuffer_:Int)="GLboolean glad_glIsFramebuffer( GLuint)!"
Global glIsList:Byte(list_:Int)="GLboolean glad_glIsList( GLuint)!"
Global glIsProgram:Byte(program_:Int)="GLboolean glad_glIsProgram( GLuint)!"
Global glIsQuery:Byte(id_:Int)="GLboolean glad_glIsQuery( GLuint)!"
Global glIsRenderbuffer:Byte(renderbuffer_:Int)="GLboolean glad_glIsRenderbuffer( GLuint)!"
Global glIsSampler:Byte(sampler_:Int)="GLboolean glad_glIsSampler( GLuint)!"
Global glIsShader:Byte(shader_:Int)="GLboolean glad_glIsShader( GLuint)!"
Global glIsTexture:Byte(texture_:Int)="GLboolean glad_glIsTexture( GLuint)!"
Global glIsVertexArray:Byte(array_:Int)="GLboolean glad_glIsVertexArray( GLuint)!"
Global glLightModelf(pname_:Int,param_:Float)="void glad_glLightModelf( GLenum, GLfloat)!"
Global glLightModelfv(pname_:Int,params_:Float Ptr)="void glad_glLightModelfv( GLenum,const GLfloat*)!"
Global glLightModeli(pname_:Int,param_:Int)="void glad_glLightModeli( GLenum, GLint)!"
Global glLightModeliv(pname_:Int,params_:Int Ptr)="void glad_glLightModeliv( GLenum,const GLint*)!"
Global glLightf(light_:Int,pname_:Int,param_:Float)="void glad_glLightf( GLenum, GLenum, GLfloat)!"
Global glLightfv(light_:Int,pname_:Int,params_:Float Ptr)="void glad_glLightfv( GLenum, GLenum,const GLfloat*)!"
Global glLighti(light_:Int,pname_:Int,param_:Int)="void glad_glLighti( GLenum, GLenum, GLint)!"
Global glLightiv(light_:Int,pname_:Int,params_:Int Ptr)="void glad_glLightiv( GLenum, GLenum,const GLint*)!"
Global glLineStipple(factor_:Int,pattern_:Short)="void glad_glLineStipple( GLint, GLushort)!"
Global glLineWidth(width_:Float)="void glad_glLineWidth( GLfloat)!"
Global glLinkProgram(program_:Int)="void glad_glLinkProgram( GLuint)!"
Global glListBase(base_:Int)="void glad_glListBase( GLuint)!"
Global glLoadIdentity()="void glad_glLoadIdentity( void)!"
Global glLoadMatrixd(m_:Double Ptr)="void glad_glLoadMatrixd(const GLdouble*)!"
Global glLoadMatrixf(m_:Float Ptr)="void glad_glLoadMatrixf(const GLfloat*)!"
Global glLoadName(name_:Int)="void glad_glLoadName( GLuint)!"
Global glLoadTransposeMatrixd(m_:Double Ptr)="void glad_glLoadTransposeMatrixd(const GLdouble*)!"
Global glLoadTransposeMatrixf(m_:Float Ptr)="void glad_glLoadTransposeMatrixf(const GLfloat*)!"
Global glLogicOp(opcode_:Int)="void glad_glLogicOp( GLenum)!"
Global glMap1d(target_:Int,u1_:Double,u2_:Double,stride_:Int,order_:Int,points_:Double Ptr)="void glad_glMap1d( GLenum, GLdouble, GLdouble, GLint, GLint,const GLdouble*)!"
Global glMap1f(target_:Int,u1_:Float,u2_:Float,stride_:Int,order_:Int,points_:Float Ptr)="void glad_glMap1f( GLenum, GLfloat, GLfloat, GLint, GLint,const GLfloat*)!"
Global glMap2d(target_:Int,u1_:Double,u2_:Double,ustride_:Int,uorder_:Int,v1_:Double,v2_:Double,vstride_:Int,vorder_:Int,points_:Double Ptr)="void glad_glMap2d( GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint,const GLdouble*)!"
Global glMap2f(target_:Int,u1_:Float,u2_:Float,ustride_:Int,uorder_:Int,v1_:Float,v2_:Float,vstride_:Int,vorder_:Int,points_:Float Ptr)="void glad_glMap2f( GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint,const GLfloat*)!"
Global glMapBuffer:Byte Ptr(target_:Int,access_:Int)="void* glad_glMapBuffer( GLenum, GLenum)!"
Global glMapBufferRange:Byte Ptr(target_:Int,offset_:Int,length_:Int,access_:Int)="void* glad_glMapBufferRange( GLenum, GLintptr, GLsizeiptr, GLbitfield)!"
Global glMapGrid1d(un_:Int,u1_:Double,u2_:Double)="void glad_glMapGrid1d( GLint, GLdouble, GLdouble)!"
Global glMapGrid1f(un_:Int,u1_:Float,u2_:Float)="void glad_glMapGrid1f( GLint, GLfloat, GLfloat)!"
Global glMapGrid2d(un_:Int,u1_:Double,u2_:Double,vn_:Int,v1_:Double,v2_:Double)="void glad_glMapGrid2d( GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble)!"
Global glMapGrid2f(un_:Int,u1_:Float,u2_:Float,vn_:Int,v1_:Float,v2_:Float)="void glad_glMapGrid2f( GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat)!"
Global glMaterialf(face_:Int,pname_:Int,param_:Float)="void glad_glMaterialf( GLenum, GLenum, GLfloat)!"
Global glMaterialfv(face_:Int,pname_:Int,params_:Float Ptr)="void glad_glMaterialfv( GLenum, GLenum,const GLfloat*)!"
Global glMateriali(face_:Int,pname_:Int,param_:Int)="void glad_glMateriali( GLenum, GLenum, GLint)!"
Global glMaterialiv(face_:Int,pname_:Int,params_:Int Ptr)="void glad_glMaterialiv( GLenum, GLenum,const GLint*)!"
Global glMatrixMode(mode_:Int)="void glad_glMatrixMode( GLenum)!"
Global glMultMatrixd(m_:Double Ptr)="void glad_glMultMatrixd(const GLdouble*)!"
Global glMultMatrixf(m_:Float Ptr)="void glad_glMultMatrixf(const GLfloat*)!"
Global glMultTransposeMatrixd(m_:Double Ptr)="void glad_glMultTransposeMatrixd(const GLdouble*)!"
Global glMultTransposeMatrixf(m_:Float Ptr)="void glad_glMultTransposeMatrixf(const GLfloat*)!"
Global glMultiDrawArrays(mode_:Int,first_:Int Ptr,count_:Int Ptr,drawcount_:Int)="void glad_glMultiDrawArrays( GLenum,const GLint*,const GLsizei*, GLsizei)!"
Global glMultiDrawElements(mode_:Int,count_:Int Ptr,type_:Int,indices_:Byte Ptr Ptr,drawcount_:Int)="void glad_glMultiDrawElements( GLenum,const GLsizei*, GLenum,const void* const*, GLsizei)!"
Global glMultiDrawElementsBaseVertex(mode_:Int,count_:Int Ptr,type_:Int,indices_:Byte Ptr Ptr,drawcount_:Int,basevertex_:Int Ptr)="void glad_glMultiDrawElementsBaseVertex( GLenum,const GLsizei*, GLenum,const void* const*, GLsizei,const GLint*)!"
Global glMultiTexCoord1d(target_:Int,s_:Double)="void glad_glMultiTexCoord1d( GLenum, GLdouble)!"
Global glMultiTexCoord1dv(target_:Int,v_:Double Ptr)="void glad_glMultiTexCoord1dv( GLenum,const GLdouble*)!"
Global glMultiTexCoord1f(target_:Int,s_:Float)="void glad_glMultiTexCoord1f( GLenum, GLfloat)!"
Global glMultiTexCoord1fv(target_:Int,v_:Float Ptr)="void glad_glMultiTexCoord1fv( GLenum,const GLfloat*)!"
Global glMultiTexCoord1i(target_:Int,s_:Int)="void glad_glMultiTexCoord1i( GLenum, GLint)!"
Global glMultiTexCoord1iv(target_:Int,v_:Int Ptr)="void glad_glMultiTexCoord1iv( GLenum,const GLint*)!"
Global glMultiTexCoord1s(target_:Int,s_:Short)="void glad_glMultiTexCoord1s( GLenum, GLshort)!"
Global glMultiTexCoord1sv(target_:Int,v_:Short Ptr)="void glad_glMultiTexCoord1sv( GLenum,const GLshort*)!"
Global glMultiTexCoord2d(target_:Int,s_:Double,t_:Double)="void glad_glMultiTexCoord2d( GLenum, GLdouble, GLdouble)!"
Global glMultiTexCoord2dv(target_:Int,v_:Double Ptr)="void glad_glMultiTexCoord2dv( GLenum,const GLdouble*)!"
Global glMultiTexCoord2f(target_:Int,s_:Float,t_:Float)="void glad_glMultiTexCoord2f( GLenum, GLfloat, GLfloat)!"
Global glMultiTexCoord2fv(target_:Int,v_:Float Ptr)="void glad_glMultiTexCoord2fv( GLenum,const GLfloat*)!"
Global glMultiTexCoord2i(target_:Int,s_:Int,t_:Int)="void glad_glMultiTexCoord2i( GLenum, GLint, GLint)!"
Global glMultiTexCoord2iv(target_:Int,v_:Int Ptr)="void glad_glMultiTexCoord2iv( GLenum,const GLint*)!"
Global glMultiTexCoord2s(target_:Int,s_:Short,t_:Short)="void glad_glMultiTexCoord2s( GLenum, GLshort, GLshort)!"
Global glMultiTexCoord2sv(target_:Int,v_:Short Ptr)="void glad_glMultiTexCoord2sv( GLenum,const GLshort*)!"
Global glMultiTexCoord3d(target_:Int,s_:Double,t_:Double,r_:Double)="void glad_glMultiTexCoord3d( GLenum, GLdouble, GLdouble, GLdouble)!"
Global glMultiTexCoord3dv(target_:Int,v_:Double Ptr)="void glad_glMultiTexCoord3dv( GLenum,const GLdouble*)!"
Global glMultiTexCoord3f(target_:Int,s_:Float,t_:Float,r_:Float)="void glad_glMultiTexCoord3f( GLenum, GLfloat, GLfloat, GLfloat)!"
Global glMultiTexCoord3fv(target_:Int,v_:Float Ptr)="void glad_glMultiTexCoord3fv( GLenum,const GLfloat*)!"
Global glMultiTexCoord3i(target_:Int,s_:Int,t_:Int,r_:Int)="void glad_glMultiTexCoord3i( GLenum, GLint, GLint, GLint)!"
Global glMultiTexCoord3iv(target_:Int,v_:Int Ptr)="void glad_glMultiTexCoord3iv( GLenum,const GLint*)!"
Global glMultiTexCoord3s(target_:Int,s_:Short,t_:Short,r_:Short)="void glad_glMultiTexCoord3s( GLenum, GLshort, GLshort, GLshort)!"
Global glMultiTexCoord3sv(target_:Int,v_:Short Ptr)="void glad_glMultiTexCoord3sv( GLenum,const GLshort*)!"
Global glMultiTexCoord4d(target_:Int,s_:Double,t_:Double,r_:Double,q_:Double)="void glad_glMultiTexCoord4d( GLenum, GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glMultiTexCoord4dv(target_:Int,v_:Double Ptr)="void glad_glMultiTexCoord4dv( GLenum,const GLdouble*)!"
Global glMultiTexCoord4f(target_:Int,s_:Float,t_:Float,r_:Float,q_:Float)="void glad_glMultiTexCoord4f( GLenum, GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glMultiTexCoord4fv(target_:Int,v_:Float Ptr)="void glad_glMultiTexCoord4fv( GLenum,const GLfloat*)!"
Global glMultiTexCoord4i(target_:Int,s_:Int,t_:Int,r_:Int,q_:Int)="void glad_glMultiTexCoord4i( GLenum, GLint, GLint, GLint, GLint)!"
Global glMultiTexCoord4iv(target_:Int,v_:Int Ptr)="void glad_glMultiTexCoord4iv( GLenum,const GLint*)!"
Global glMultiTexCoord4s(target_:Int,s_:Short,t_:Short,r_:Short,q_:Short)="void glad_glMultiTexCoord4s( GLenum, GLshort, GLshort, GLshort, GLshort)!"
Global glMultiTexCoord4sv(target_:Int,v_:Short Ptr)="void glad_glMultiTexCoord4sv( GLenum,const GLshort*)!"
Global glMultiTexCoordP1ui(texture_:Int,type_:Int,coords_:Int)="void glad_glMultiTexCoordP1ui( GLenum, GLenum, GLuint)!"
Global glMultiTexCoordP1uiv(texture_:Int,type_:Int,coords_:Int Ptr)="void glad_glMultiTexCoordP1uiv( GLenum, GLenum,const GLuint*)!"
Global glMultiTexCoordP2ui(texture_:Int,type_:Int,coords_:Int)="void glad_glMultiTexCoordP2ui( GLenum, GLenum, GLuint)!"
Global glMultiTexCoordP2uiv(texture_:Int,type_:Int,coords_:Int Ptr)="void glad_glMultiTexCoordP2uiv( GLenum, GLenum,const GLuint*)!"
Global glMultiTexCoordP3ui(texture_:Int,type_:Int,coords_:Int)="void glad_glMultiTexCoordP3ui( GLenum, GLenum, GLuint)!"
Global glMultiTexCoordP3uiv(texture_:Int,type_:Int,coords_:Int Ptr)="void glad_glMultiTexCoordP3uiv( GLenum, GLenum,const GLuint*)!"
Global glMultiTexCoordP4ui(texture_:Int,type_:Int,coords_:Int)="void glad_glMultiTexCoordP4ui( GLenum, GLenum, GLuint)!"
Global glMultiTexCoordP4uiv(texture_:Int,type_:Int,coords_:Int Ptr)="void glad_glMultiTexCoordP4uiv( GLenum, GLenum,const GLuint*)!"
Global glNewList(list_:Int,mode_:Int)="void glad_glNewList( GLuint, GLenum)!"
Global glNormal3b(nx_:Byte,ny_:Byte,nz_:Byte)="void glad_glNormal3b( GLbyte, GLbyte, GLbyte)!"
Global glNormal3bv(v_:Byte Ptr)="void glad_glNormal3bv(const GLbyte*)!"
Global glNormal3d(nx_:Double,ny_:Double,nz_:Double)="void glad_glNormal3d( GLdouble, GLdouble, GLdouble)!"
Global glNormal3dv(v_:Double Ptr)="void glad_glNormal3dv(const GLdouble*)!"
Global glNormal3f(nx_:Float,ny_:Float,nz_:Float)="void glad_glNormal3f( GLfloat, GLfloat, GLfloat)!"
Global glNormal3fv(v_:Float Ptr)="void glad_glNormal3fv(const GLfloat*)!"
Global glNormal3i(nx_:Int,ny_:Int,nz_:Int)="void glad_glNormal3i( GLint, GLint, GLint)!"
Global glNormal3iv(v_:Int Ptr)="void glad_glNormal3iv(const GLint*)!"
Global glNormal3s(nx_:Short,ny_:Short,nz_:Short)="void glad_glNormal3s( GLshort, GLshort, GLshort)!"
Global glNormal3sv(v_:Short Ptr)="void glad_glNormal3sv(const GLshort*)!"
Global glNormalP3ui(type_:Int,coords_:Int)="void glad_glNormalP3ui( GLenum, GLuint)!"
Global glNormalP3uiv(type_:Int,coords_:Int Ptr)="void glad_glNormalP3uiv( GLenum,const GLuint*)!"
Global glNormalPointer(type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glNormalPointer( GLenum, GLsizei,const void*)!"
Global glObjectLabel(identifier_:Int,name_:Int,length_:Int,label_:Byte Ptr)="void glad_glObjectLabel( GLenum, GLuint, GLsizei,const GLchar*)!"
Global glObjectPtrLabel(ptr_:Byte Ptr,length_:Int,label_:Byte Ptr)="void glad_glObjectPtrLabel(const void*, GLsizei,const GLchar*)!"
Global glOrtho(left_:Double,right_:Double,bottom_:Double,top_:Double,zNear_:Double,zFar_:Double)="void glad_glOrtho( GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glPassThrough(token_:Float)="void glad_glPassThrough( GLfloat)!"
Global glPixelMapfv(map_:Int,mapsize_:Int,values_:Float Ptr)="void glad_glPixelMapfv( GLenum, GLsizei,const GLfloat*)!"
Global glPixelMapuiv(map_:Int,mapsize_:Int,values_:Int Ptr)="void glad_glPixelMapuiv( GLenum, GLsizei,const GLuint*)!"
Global glPixelMapusv(map_:Int,mapsize_:Int,values_:Short Ptr)="void glad_glPixelMapusv( GLenum, GLsizei,const GLushort*)!"
Global glPixelStoref(pname_:Int,param_:Float)="void glad_glPixelStoref( GLenum, GLfloat)!"
Global glPixelStorei(pname_:Int,param_:Int)="void glad_glPixelStorei( GLenum, GLint)!"
Global glPixelTransferf(pname_:Int,param_:Float)="void glad_glPixelTransferf( GLenum, GLfloat)!"
Global glPixelTransferi(pname_:Int,param_:Int)="void glad_glPixelTransferi( GLenum, GLint)!"
Global glPixelZoom(xfactor_:Float,yfactor_:Float)="void glad_glPixelZoom( GLfloat, GLfloat)!"
Global glPointParameterf(pname_:Int,param_:Float)="void glad_glPointParameterf( GLenum, GLfloat)!"
Global glPointParameterfv(pname_:Int,params_:Float Ptr)="void glad_glPointParameterfv( GLenum,const GLfloat*)!"
Global glPointParameteri(pname_:Int,param_:Int)="void glad_glPointParameteri( GLenum, GLint)!"
Global glPointParameteriv(pname_:Int,params_:Int Ptr)="void glad_glPointParameteriv( GLenum,const GLint*)!"
Global glPointSize(size_:Float)="void glad_glPointSize( GLfloat)!"
Global glPolygonMode(face_:Int,mode_:Int)="void glad_glPolygonMode( GLenum, GLenum)!"
Global glPolygonOffset(factor_:Float,units_:Float)="void glad_glPolygonOffset( GLfloat, GLfloat)!"
Global glPolygonStipple(mask_:Byte Ptr)="void glad_glPolygonStipple(const GLubyte*)!"
Global glPopAttrib()="void glad_glPopAttrib( void)!"
Global glPopClientAttrib()="void glad_glPopClientAttrib( void)!"
Global glPopDebugGroup()="void glad_glPopDebugGroup( void)!"
Global glPopMatrix()="void glad_glPopMatrix( void)!"
Global glPopName()="void glad_glPopName( void)!"
Global glPrimitiveRestartIndex(index_:Int)="void glad_glPrimitiveRestartIndex( GLuint)!"
Global glPrioritizeTextures(n_:Int,textures_:Int Ptr,priorities_:Float Ptr)="void glad_glPrioritizeTextures( GLsizei,const GLuint*,const GLfloat*)!"
Global glProvokingVertex(mode_:Int)="void glad_glProvokingVertex( GLenum)!"
Global glPushAttrib(mask_:Int)="void glad_glPushAttrib( GLbitfield)!"
Global glPushClientAttrib(mask_:Int)="void glad_glPushClientAttrib( GLbitfield)!"
Global glPushDebugGroup(source_:Int,id_:Int,length_:Int,message_:Byte Ptr)="void glad_glPushDebugGroup( GLenum, GLuint, GLsizei,const GLchar*)!"
Global glPushMatrix()="void glad_glPushMatrix( void)!"
Global glPushName(name_:Int)="void glad_glPushName( GLuint)!"
Global glQueryCounter(id_:Int,target_:Int)="void glad_glQueryCounter( GLuint, GLenum)!"
Global glRasterPos2d(x_:Double,y_:Double)="void glad_glRasterPos2d( GLdouble, GLdouble)!"
Global glRasterPos2dv(v_:Double Ptr)="void glad_glRasterPos2dv(const GLdouble*)!"
Global glRasterPos2f(x_:Float,y_:Float)="void glad_glRasterPos2f( GLfloat, GLfloat)!"
Global glRasterPos2fv(v_:Float Ptr)="void glad_glRasterPos2fv(const GLfloat*)!"
Global glRasterPos2i(x_:Int,y_:Int)="void glad_glRasterPos2i( GLint, GLint)!"
Global glRasterPos2iv(v_:Int Ptr)="void glad_glRasterPos2iv(const GLint*)!"
Global glRasterPos2s(x_:Short,y_:Short)="void glad_glRasterPos2s( GLshort, GLshort)!"
Global glRasterPos2sv(v_:Short Ptr)="void glad_glRasterPos2sv(const GLshort*)!"
Global glRasterPos3d(x_:Double,y_:Double,z_:Double)="void glad_glRasterPos3d( GLdouble, GLdouble, GLdouble)!"
Global glRasterPos3dv(v_:Double Ptr)="void glad_glRasterPos3dv(const GLdouble*)!"
Global glRasterPos3f(x_:Float,y_:Float,z_:Float)="void glad_glRasterPos3f( GLfloat, GLfloat, GLfloat)!"
Global glRasterPos3fv(v_:Float Ptr)="void glad_glRasterPos3fv(const GLfloat*)!"
Global glRasterPos3i(x_:Int,y_:Int,z_:Int)="void glad_glRasterPos3i( GLint, GLint, GLint)!"
Global glRasterPos3iv(v_:Int Ptr)="void glad_glRasterPos3iv(const GLint*)!"
Global glRasterPos3s(x_:Short,y_:Short,z_:Short)="void glad_glRasterPos3s( GLshort, GLshort, GLshort)!"
Global glRasterPos3sv(v_:Short Ptr)="void glad_glRasterPos3sv(const GLshort*)!"
Global glRasterPos4d(x_:Double,y_:Double,z_:Double,w_:Double)="void glad_glRasterPos4d( GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glRasterPos4dv(v_:Double Ptr)="void glad_glRasterPos4dv(const GLdouble*)!"
Global glRasterPos4f(x_:Float,y_:Float,z_:Float,w_:Float)="void glad_glRasterPos4f( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glRasterPos4fv(v_:Float Ptr)="void glad_glRasterPos4fv(const GLfloat*)!"
Global glRasterPos4i(x_:Int,y_:Int,z_:Int,w_:Int)="void glad_glRasterPos4i( GLint, GLint, GLint, GLint)!"
Global glRasterPos4iv(v_:Int Ptr)="void glad_glRasterPos4iv(const GLint*)!"
Global glRasterPos4s(x_:Short,y_:Short,z_:Short,w_:Short)="void glad_glRasterPos4s( GLshort, GLshort, GLshort, GLshort)!"
Global glRasterPos4sv(v_:Short Ptr)="void glad_glRasterPos4sv(const GLshort*)!"
Global glReadBuffer(src_:Int)="void glad_glReadBuffer( GLenum)!"
Global glReadPixels(x_:Int,y_:Int,width_:Int,height_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glReadPixels( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void*)!"
Global glReadnPixels(x_:Int,y_:Int,width_:Int,height_:Int,format_:Int,type_:Int,bufSize_:Int,data_:Byte Ptr)="void glad_glReadnPixels( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*)!"
Global glReadnPixelsARB(x_:Int,y_:Int,width_:Int,height_:Int,format_:Int,type_:Int,bufSize_:Int,data_:Byte Ptr)="void glad_glReadnPixelsARB( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void*)!"
Global glRectd(x1_:Double,y1_:Double,x2_:Double,y2_:Double)="void glad_glRectd( GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glRectdv(v1_:Double Ptr,v2_:Double Ptr)="void glad_glRectdv(const GLdouble*,const GLdouble*)!"
Global glRectf(x1_:Float,y1_:Float,x2_:Float,y2_:Float)="void glad_glRectf( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glRectfv(v1_:Float Ptr,v2_:Float Ptr)="void glad_glRectfv(const GLfloat*,const GLfloat*)!"
Global glRecti(x1_:Int,y1_:Int,x2_:Int,y2_:Int)="void glad_glRecti( GLint, GLint, GLint, GLint)!"
Global glRectiv(v1_:Int Ptr,v2_:Int Ptr)="void glad_glRectiv(const GLint*,const GLint*)!"
Global glRects(x1_:Short,y1_:Short,x2_:Short,y2_:Short)="void glad_glRects( GLshort, GLshort, GLshort, GLshort)!"
Global glRectsv(v1_:Short Ptr,v2_:Short Ptr)="void glad_glRectsv(const GLshort*,const GLshort*)!"
Global glRenderMode:Int(mode_:Int)="GLint glad_glRenderMode( GLenum)!"
Global glRenderbufferStorage(target_:Int,internalformat_:Int,width_:Int,height_:Int)="void glad_glRenderbufferStorage( GLenum, GLenum, GLsizei, GLsizei)!"
Global glRenderbufferStorageMultisample(target_:Int,samples_:Int,internalformat_:Int,width_:Int,height_:Int)="void glad_glRenderbufferStorageMultisample( GLenum, GLsizei, GLenum, GLsizei, GLsizei)!"
Global glRotated(angle_:Double,x_:Double,y_:Double,z_:Double)="void glad_glRotated( GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glRotatef(angle_:Float,x_:Float,y_:Float,z_:Float)="void glad_glRotatef( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glSampleCoverage(value_:Float,invert_:Byte)="void glad_glSampleCoverage( GLfloat, GLboolean)!"
Global glSampleCoverageARB(value_:Float,invert_:Byte)="void glad_glSampleCoverageARB( GLfloat, GLboolean)!"
Global glSampleMaski(maskNumber_:Int,mask_:Int)="void glad_glSampleMaski( GLuint, GLbitfield)!"
Global glSamplerParameterIiv(sampler_:Int,pname_:Int,param_:Int Ptr)="void glad_glSamplerParameterIiv( GLuint, GLenum,const GLint*)!"
Global glSamplerParameterIuiv(sampler_:Int,pname_:Int,param_:Int Ptr)="void glad_glSamplerParameterIuiv( GLuint, GLenum,const GLuint*)!"
Global glSamplerParameterf(sampler_:Int,pname_:Int,param_:Float)="void glad_glSamplerParameterf( GLuint, GLenum, GLfloat)!"
Global glSamplerParameterfv(sampler_:Int,pname_:Int,param_:Float Ptr)="void glad_glSamplerParameterfv( GLuint, GLenum,const GLfloat*)!"
Global glSamplerParameteri(sampler_:Int,pname_:Int,param_:Int)="void glad_glSamplerParameteri( GLuint, GLenum, GLint)!"
Global glSamplerParameteriv(sampler_:Int,pname_:Int,param_:Int Ptr)="void glad_glSamplerParameteriv( GLuint, GLenum,const GLint*)!"
Global glScaled(x_:Double,y_:Double,z_:Double)="void glad_glScaled( GLdouble, GLdouble, GLdouble)!"
Global glScalef(x_:Float,y_:Float,z_:Float)="void glad_glScalef( GLfloat, GLfloat, GLfloat)!"
Global glScissor(x_:Int,y_:Int,width_:Int,height_:Int)="void glad_glScissor( GLint, GLint, GLsizei, GLsizei)!"
Global glSecondaryColor3b(red_:Byte,green_:Byte,blue_:Byte)="void glad_glSecondaryColor3b( GLbyte, GLbyte, GLbyte)!"
Global glSecondaryColor3bv(v_:Byte Ptr)="void glad_glSecondaryColor3bv(const GLbyte*)!"
Global glSecondaryColor3d(red_:Double,green_:Double,blue_:Double)="void glad_glSecondaryColor3d( GLdouble, GLdouble, GLdouble)!"
Global glSecondaryColor3dv(v_:Double Ptr)="void glad_glSecondaryColor3dv(const GLdouble*)!"
Global glSecondaryColor3f(red_:Float,green_:Float,blue_:Float)="void glad_glSecondaryColor3f( GLfloat, GLfloat, GLfloat)!"
Global glSecondaryColor3fv(v_:Float Ptr)="void glad_glSecondaryColor3fv(const GLfloat*)!"
Global glSecondaryColor3i(red_:Int,green_:Int,blue_:Int)="void glad_glSecondaryColor3i( GLint, GLint, GLint)!"
Global glSecondaryColor3iv(v_:Int Ptr)="void glad_glSecondaryColor3iv(const GLint*)!"
Global glSecondaryColor3s(red_:Short,green_:Short,blue_:Short)="void glad_glSecondaryColor3s( GLshort, GLshort, GLshort)!"
Global glSecondaryColor3sv(v_:Short Ptr)="void glad_glSecondaryColor3sv(const GLshort*)!"
Global glSecondaryColor3ub(red_:Byte,green_:Byte,blue_:Byte)="void glad_glSecondaryColor3ub( GLubyte, GLubyte, GLubyte)!"
Global glSecondaryColor3ubv(v_:Byte Ptr)="void glad_glSecondaryColor3ubv(const GLubyte*)!"
Global glSecondaryColor3ui(red_:Int,green_:Int,blue_:Int)="void glad_glSecondaryColor3ui( GLuint, GLuint, GLuint)!"
Global glSecondaryColor3uiv(v_:Int Ptr)="void glad_glSecondaryColor3uiv(const GLuint*)!"
Global glSecondaryColor3us(red_:Short,green_:Short,blue_:Short)="void glad_glSecondaryColor3us( GLushort, GLushort, GLushort)!"
Global glSecondaryColor3usv(v_:Short Ptr)="void glad_glSecondaryColor3usv(const GLushort*)!"
Global glSecondaryColorP3ui(type_:Int,color_:Int)="void glad_glSecondaryColorP3ui( GLenum, GLuint)!"
Global glSecondaryColorP3uiv(type_:Int,color_:Int Ptr)="void glad_glSecondaryColorP3uiv( GLenum,const GLuint*)!"
Global glSecondaryColorPointer(size_:Int,type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glSecondaryColorPointer( GLint, GLenum, GLsizei,const void*)!"
Global glSelectBuffer(size_:Int,buffer_:Int Ptr)="void glad_glSelectBuffer( GLsizei, GLuint*)!"
Global glShadeModel(mode_:Int)="void glad_glShadeModel( GLenum)!"
Global _glShaderSource(shader_:Int,count_:Int,string_:Byte Ptr Ptr,length_:Int Ptr)="void glad_glShaderSource( GLuint, GLsizei,const GLchar* const*,const GLint*)!"
Global glStencilFunc(func_:Int,ref_:Int,mask_:Int)="void glad_glStencilFunc( GLenum, GLint, GLuint)!"
Global glStencilFuncSeparate(face_:Int,func_:Int,ref_:Int,mask_:Int)="void glad_glStencilFuncSeparate( GLenum, GLenum, GLint, GLuint)!"
Global glStencilMask(mask_:Int)="void glad_glStencilMask( GLuint)!"
Global glStencilMaskSeparate(face_:Int,mask_:Int)="void glad_glStencilMaskSeparate( GLenum, GLuint)!"
Global glStencilOp(fail_:Int,zfail_:Int,zpass_:Int)="void glad_glStencilOp( GLenum, GLenum, GLenum)!"
Global glStencilOpSeparate(face_:Int,sfail_:Int,dpfail_:Int,dppass_:Int)="void glad_glStencilOpSeparate( GLenum, GLenum, GLenum, GLenum)!"
Global glTexBuffer(target_:Int,internalformat_:Int,buffer_:Int)="void glad_glTexBuffer( GLenum, GLenum, GLuint)!"
Global glTexCoord1d(s_:Double)="void glad_glTexCoord1d( GLdouble)!"
Global glTexCoord1dv(v_:Double Ptr)="void glad_glTexCoord1dv(const GLdouble*)!"
Global glTexCoord1f(s_:Float)="void glad_glTexCoord1f( GLfloat)!"
Global glTexCoord1fv(v_:Float Ptr)="void glad_glTexCoord1fv(const GLfloat*)!"
Global glTexCoord1i(s_:Int)="void glad_glTexCoord1i( GLint)!"
Global glTexCoord1iv(v_:Int Ptr)="void glad_glTexCoord1iv(const GLint*)!"
Global glTexCoord1s(s_:Short)="void glad_glTexCoord1s( GLshort)!"
Global glTexCoord1sv(v_:Short Ptr)="void glad_glTexCoord1sv(const GLshort*)!"
Global glTexCoord2d(s_:Double,t_:Double)="void glad_glTexCoord2d( GLdouble, GLdouble)!"
Global glTexCoord2dv(v_:Double Ptr)="void glad_glTexCoord2dv(const GLdouble*)!"
Global glTexCoord2f(s_:Float,t_:Float)="void glad_glTexCoord2f( GLfloat, GLfloat)!"
Global glTexCoord2fv(v_:Float Ptr)="void glad_glTexCoord2fv(const GLfloat*)!"
Global glTexCoord2i(s_:Int,t_:Int)="void glad_glTexCoord2i( GLint, GLint)!"
Global glTexCoord2iv(v_:Int Ptr)="void glad_glTexCoord2iv(const GLint*)!"
Global glTexCoord2s(s_:Short,t_:Short)="void glad_glTexCoord2s( GLshort, GLshort)!"
Global glTexCoord2sv(v_:Short Ptr)="void glad_glTexCoord2sv(const GLshort*)!"
Global glTexCoord3d(s_:Double,t_:Double,r_:Double)="void glad_glTexCoord3d( GLdouble, GLdouble, GLdouble)!"
Global glTexCoord3dv(v_:Double Ptr)="void glad_glTexCoord3dv(const GLdouble*)!"
Global glTexCoord3f(s_:Float,t_:Float,r_:Float)="void glad_glTexCoord3f( GLfloat, GLfloat, GLfloat)!"
Global glTexCoord3fv(v_:Float Ptr)="void glad_glTexCoord3fv(const GLfloat*)!"
Global glTexCoord3i(s_:Int,t_:Int,r_:Int)="void glad_glTexCoord3i( GLint, GLint, GLint)!"
Global glTexCoord3iv(v_:Int Ptr)="void glad_glTexCoord3iv(const GLint*)!"
Global glTexCoord3s(s_:Short,t_:Short,r_:Short)="void glad_glTexCoord3s( GLshort, GLshort, GLshort)!"
Global glTexCoord3sv(v_:Short Ptr)="void glad_glTexCoord3sv(const GLshort*)!"
Global glTexCoord4d(s_:Double,t_:Double,r_:Double,q_:Double)="void glad_glTexCoord4d( GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glTexCoord4dv(v_:Double Ptr)="void glad_glTexCoord4dv(const GLdouble*)!"
Global glTexCoord4f(s_:Float,t_:Float,r_:Float,q_:Float)="void glad_glTexCoord4f( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glTexCoord4fv(v_:Float Ptr)="void glad_glTexCoord4fv(const GLfloat*)!"
Global glTexCoord4i(s_:Int,t_:Int,r_:Int,q_:Int)="void glad_glTexCoord4i( GLint, GLint, GLint, GLint)!"
Global glTexCoord4iv(v_:Int Ptr)="void glad_glTexCoord4iv(const GLint*)!"
Global glTexCoord4s(s_:Short,t_:Short,r_:Short,q_:Short)="void glad_glTexCoord4s( GLshort, GLshort, GLshort, GLshort)!"
Global glTexCoord4sv(v_:Short Ptr)="void glad_glTexCoord4sv(const GLshort*)!"
Global glTexCoordP1ui(type_:Int,coords_:Int)="void glad_glTexCoordP1ui( GLenum, GLuint)!"
Global glTexCoordP1uiv(type_:Int,coords_:Int Ptr)="void glad_glTexCoordP1uiv( GLenum,const GLuint*)!"
Global glTexCoordP2ui(type_:Int,coords_:Int)="void glad_glTexCoordP2ui( GLenum, GLuint)!"
Global glTexCoordP2uiv(type_:Int,coords_:Int Ptr)="void glad_glTexCoordP2uiv( GLenum,const GLuint*)!"
Global glTexCoordP3ui(type_:Int,coords_:Int)="void glad_glTexCoordP3ui( GLenum, GLuint)!"
Global glTexCoordP3uiv(type_:Int,coords_:Int Ptr)="void glad_glTexCoordP3uiv( GLenum,const GLuint*)!"
Global glTexCoordP4ui(type_:Int,coords_:Int)="void glad_glTexCoordP4ui( GLenum, GLuint)!"
Global glTexCoordP4uiv(type_:Int,coords_:Int Ptr)="void glad_glTexCoordP4uiv( GLenum,const GLuint*)!"
Global glTexCoordPointer(size_:Int,type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glTexCoordPointer( GLint, GLenum, GLsizei,const void*)!"
Global glTexEnvf(target_:Int,pname_:Int,param_:Float)="void glad_glTexEnvf( GLenum, GLenum, GLfloat)!"
Global glTexEnvfv(target_:Int,pname_:Int,params_:Float Ptr)="void glad_glTexEnvfv( GLenum, GLenum,const GLfloat*)!"
Global glTexEnvi(target_:Int,pname_:Int,param_:Int)="void glad_glTexEnvi( GLenum, GLenum, GLint)!"
Global glTexEnviv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glTexEnviv( GLenum, GLenum,const GLint*)!"
Global glTexGend(coord_:Int,pname_:Int,param_:Double)="void glad_glTexGend( GLenum, GLenum, GLdouble)!"
Global glTexGendv(coord_:Int,pname_:Int,params_:Double Ptr)="void glad_glTexGendv( GLenum, GLenum,const GLdouble*)!"
Global glTexGenf(coord_:Int,pname_:Int,param_:Float)="void glad_glTexGenf( GLenum, GLenum, GLfloat)!"
Global glTexGenfv(coord_:Int,pname_:Int,params_:Float Ptr)="void glad_glTexGenfv( GLenum, GLenum,const GLfloat*)!"
Global glTexGeni(coord_:Int,pname_:Int,param_:Int)="void glad_glTexGeni( GLenum, GLenum, GLint)!"
Global glTexGeniv(coord_:Int,pname_:Int,params_:Int Ptr)="void glad_glTexGeniv( GLenum, GLenum,const GLint*)!"
Global glTexImage1D(target_:Int,level_:Int,internalformat_:Int,width_:Int,border_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glTexImage1D( GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum,const void*)!"
Global glTexImage2D(target_:Int,level_:Int,internalformat_:Int,width_:Int,height_:Int,border_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glTexImage2D( GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum,const void*)!"
Global glTexImage2DMultisample(target_:Int,samples_:Int,internalformat_:Int,width_:Int,height_:Int,fixedsamplelocations_:Byte)="void glad_glTexImage2DMultisample( GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean)!"
Global glTexImage3D(target_:Int,level_:Int,internalformat_:Int,width_:Int,height_:Int,depth_:Int,border_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glTexImage3D( GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum,const void*)!"
Global glTexImage3DMultisample(target_:Int,samples_:Int,internalformat_:Int,width_:Int,height_:Int,depth_:Int,fixedsamplelocations_:Byte)="void glad_glTexImage3DMultisample( GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean)!"
Global glTexParameterIiv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glTexParameterIiv( GLenum, GLenum,const GLint*)!"
Global glTexParameterIuiv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glTexParameterIuiv( GLenum, GLenum,const GLuint*)!"
Global glTexParameterf(target_:Int,pname_:Int,param_:Float)="void glad_glTexParameterf( GLenum, GLenum, GLfloat)!"
Global glTexParameterfv(target_:Int,pname_:Int,params_:Float Ptr)="void glad_glTexParameterfv( GLenum, GLenum,const GLfloat*)!"
Global glTexParameteri(target_:Int,pname_:Int,param_:Int)="void glad_glTexParameteri( GLenum, GLenum, GLint)!"
Global glTexParameteriv(target_:Int,pname_:Int,params_:Int Ptr)="void glad_glTexParameteriv( GLenum, GLenum,const GLint*)!"
Global glTexSubImage1D(target_:Int,level_:Int,xoffset_:Int,width_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glTexSubImage1D( GLenum, GLint, GLint, GLsizei, GLenum, GLenum,const void*)!"
Global glTexSubImage2D(target_:Int,level_:Int,xoffset_:Int,yoffset_:Int,width_:Int,height_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glTexSubImage2D( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum,const void*)!"
Global glTexSubImage3D(target_:Int,level_:Int,xoffset_:Int,yoffset_:Int,zoffset_:Int,width_:Int,height_:Int,depth_:Int,format_:Int,type_:Int,pixels_:Byte Ptr)="void glad_glTexSubImage3D( GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum,const void*)!"
Global glTransformFeedbackVaryings(program_:Int,count_:Int,varyings_:Byte Ptr Ptr,bufferMode_:Int)="void glad_glTransformFeedbackVaryings( GLuint, GLsizei,const GLchar* const*, GLenum)!"
Global glTranslated(x_:Double,y_:Double,z_:Double)="void glad_glTranslated( GLdouble, GLdouble, GLdouble)!"
Global glTranslatef(x_:Float,y_:Float,z_:Float)="void glad_glTranslatef( GLfloat, GLfloat, GLfloat)!"
Global glUniform1f(location_:Int,v0_:Float)="void glad_glUniform1f( GLint, GLfloat)!"
Global glUniform1fv(location_:Int,count_:Int,value_:Float Ptr)="void glad_glUniform1fv( GLint, GLsizei,const GLfloat*)!"
Global glUniform1i(location_:Int,v0_:Int)="void glad_glUniform1i( GLint, GLint)!"
Global glUniform1iv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform1iv( GLint, GLsizei,const GLint*)!"
Global glUniform1ui(location_:Int,v0_:Int)="void glad_glUniform1ui( GLint, GLuint)!"
Global glUniform1uiv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform1uiv( GLint, GLsizei,const GLuint*)!"
Global glUniform2f(location_:Int,v0_:Float,v1_:Float)="void glad_glUniform2f( GLint, GLfloat, GLfloat)!"
Global glUniform2fv(location_:Int,count_:Int,value_:Float Ptr)="void glad_glUniform2fv( GLint, GLsizei,const GLfloat*)!"
Global glUniform2i(location_:Int,v0_:Int,v1_:Int)="void glad_glUniform2i( GLint, GLint, GLint)!"
Global glUniform2iv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform2iv( GLint, GLsizei,const GLint*)!"
Global glUniform2ui(location_:Int,v0_:Int,v1_:Int)="void glad_glUniform2ui( GLint, GLuint, GLuint)!"
Global glUniform2uiv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform2uiv( GLint, GLsizei,const GLuint*)!"
Global glUniform3f(location_:Int,v0_:Float,v1_:Float,v2_:Float)="void glad_glUniform3f( GLint, GLfloat, GLfloat, GLfloat)!"
Global glUniform3fv(location_:Int,count_:Int,value_:Float Ptr)="void glad_glUniform3fv( GLint, GLsizei,const GLfloat*)!"
Global glUniform3i(location_:Int,v0_:Int,v1_:Int,v2_:Int)="void glad_glUniform3i( GLint, GLint, GLint, GLint)!"
Global glUniform3iv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform3iv( GLint, GLsizei,const GLint*)!"
Global glUniform3ui(location_:Int,v0_:Int,v1_:Int,v2_:Int)="void glad_glUniform3ui( GLint, GLuint, GLuint, GLuint)!"
Global glUniform3uiv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform3uiv( GLint, GLsizei,const GLuint*)!"
Global glUniform4f(location_:Int,v0_:Float,v1_:Float,v2_:Float,v3_:Float)="void glad_glUniform4f( GLint, GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glUniform4fv(location_:Int,count_:Int,value_:Float Ptr)="void glad_glUniform4fv( GLint, GLsizei,const GLfloat*)!"
Global glUniform4i(location_:Int,v0_:Int,v1_:Int,v2_:Int,v3_:Int)="void glad_glUniform4i( GLint, GLint, GLint, GLint, GLint)!"
Global glUniform4iv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform4iv( GLint, GLsizei,const GLint*)!"
Global glUniform4ui(location_:Int,v0_:Int,v1_:Int,v2_:Int,v3_:Int)="void glad_glUniform4ui( GLint, GLuint, GLuint, GLuint, GLuint)!"
Global glUniform4uiv(location_:Int,count_:Int,value_:Int Ptr)="void glad_glUniform4uiv( GLint, GLsizei,const GLuint*)!"
Global glUniformBlockBinding(program_:Int,uniformBlockIndex_:Int,uniformBlockBinding_:Int)="void glad_glUniformBlockBinding( GLuint, GLuint, GLuint)!"
Global glUniformMatrix2fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix2fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix2x3fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix2x3fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix2x4fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix2x4fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix3fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix3fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix3x2fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix3x2fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix3x4fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix3x4fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix4fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix4fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix4x2fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix4x2fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUniformMatrix4x3fv(location_:Int,count_:Int,transpose_:Byte,value_:Float Ptr)="void glad_glUniformMatrix4x3fv( GLint, GLsizei, GLboolean,const GLfloat*)!"
Global glUnmapBuffer:Byte(target_:Int)="GLboolean glad_glUnmapBuffer( GLenum)!"
Global glUseProgram(program_:Int)="void glad_glUseProgram( GLuint)!"
Global glValidateProgram(program_:Int)="void glad_glValidateProgram( GLuint)!"
Global glVertex2d(x_:Double,y_:Double)="void glad_glVertex2d( GLdouble, GLdouble)!"
Global glVertex2dv(v_:Double Ptr)="void glad_glVertex2dv(const GLdouble*)!"
Global glVertex2f(x_:Float,y_:Float)="void glad_glVertex2f( GLfloat, GLfloat)!"
Global glVertex2fv(v_:Float Ptr)="void glad_glVertex2fv(const GLfloat*)!"
Global glVertex2i(x_:Int,y_:Int)="void glad_glVertex2i( GLint, GLint)!"
Global glVertex2iv(v_:Int Ptr)="void glad_glVertex2iv(const GLint*)!"
Global glVertex2s(x_:Short,y_:Short)="void glad_glVertex2s( GLshort, GLshort)!"
Global glVertex2sv(v_:Short Ptr)="void glad_glVertex2sv(const GLshort*)!"
Global glVertex3d(x_:Double,y_:Double,z_:Double)="void glad_glVertex3d( GLdouble, GLdouble, GLdouble)!"
Global glVertex3dv(v_:Double Ptr)="void glad_glVertex3dv(const GLdouble*)!"
Global glVertex3f(x_:Float,y_:Float,z_:Float)="void glad_glVertex3f( GLfloat, GLfloat, GLfloat)!"
Global glVertex3fv(v_:Float Ptr)="void glad_glVertex3fv(const GLfloat*)!"
Global glVertex3i(x_:Int,y_:Int,z_:Int)="void glad_glVertex3i( GLint, GLint, GLint)!"
Global glVertex3iv(v_:Int Ptr)="void glad_glVertex3iv(const GLint*)!"
Global glVertex3s(x_:Short,y_:Short,z_:Short)="void glad_glVertex3s( GLshort, GLshort, GLshort)!"
Global glVertex3sv(v_:Short Ptr)="void glad_glVertex3sv(const GLshort*)!"
Global glVertex4d(x_:Double,y_:Double,z_:Double,w_:Double)="void glad_glVertex4d( GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glVertex4dv(v_:Double Ptr)="void glad_glVertex4dv(const GLdouble*)!"
Global glVertex4f(x_:Float,y_:Float,z_:Float,w_:Float)="void glad_glVertex4f( GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glVertex4fv(v_:Float Ptr)="void glad_glVertex4fv(const GLfloat*)!"
Global glVertex4i(x_:Int,y_:Int,z_:Int,w_:Int)="void glad_glVertex4i( GLint, GLint, GLint, GLint)!"
Global glVertex4iv(v_:Int Ptr)="void glad_glVertex4iv(const GLint*)!"
Global glVertex4s(x_:Short,y_:Short,z_:Short,w_:Short)="void glad_glVertex4s( GLshort, GLshort, GLshort, GLshort)!"
Global glVertex4sv(v_:Short Ptr)="void glad_glVertex4sv(const GLshort*)!"
Global glVertexAttrib1d(index_:Int,x_:Double)="void glad_glVertexAttrib1d( GLuint, GLdouble)!"
Global glVertexAttrib1dv(index_:Int,v_:Double Ptr)="void glad_glVertexAttrib1dv( GLuint,const GLdouble*)!"
Global glVertexAttrib1f(index_:Int,x_:Float)="void glad_glVertexAttrib1f( GLuint, GLfloat)!"
Global glVertexAttrib1fv(index_:Int,v_:Float Ptr)="void glad_glVertexAttrib1fv( GLuint,const GLfloat*)!"
Global glVertexAttrib1s(index_:Int,x_:Short)="void glad_glVertexAttrib1s( GLuint, GLshort)!"
Global glVertexAttrib1sv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib1sv( GLuint,const GLshort*)!"
Global glVertexAttrib2d(index_:Int,x_:Double,y_:Double)="void glad_glVertexAttrib2d( GLuint, GLdouble, GLdouble)!"
Global glVertexAttrib2dv(index_:Int,v_:Double Ptr)="void glad_glVertexAttrib2dv( GLuint,const GLdouble*)!"
Global glVertexAttrib2f(index_:Int,x_:Float,y_:Float)="void glad_glVertexAttrib2f( GLuint, GLfloat, GLfloat)!"
Global glVertexAttrib2fv(index_:Int,v_:Float Ptr)="void glad_glVertexAttrib2fv( GLuint,const GLfloat*)!"
Global glVertexAttrib2s(index_:Int,x_:Short,y_:Short)="void glad_glVertexAttrib2s( GLuint, GLshort, GLshort)!"
Global glVertexAttrib2sv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib2sv( GLuint,const GLshort*)!"
Global glVertexAttrib3d(index_:Int,x_:Double,y_:Double,z_:Double)="void glad_glVertexAttrib3d( GLuint, GLdouble, GLdouble, GLdouble)!"
Global glVertexAttrib3dv(index_:Int,v_:Double Ptr)="void glad_glVertexAttrib3dv( GLuint,const GLdouble*)!"
Global glVertexAttrib3f(index_:Int,x_:Float,y_:Float,z_:Float)="void glad_glVertexAttrib3f( GLuint, GLfloat, GLfloat, GLfloat)!"
Global glVertexAttrib3fv(index_:Int,v_:Float Ptr)="void glad_glVertexAttrib3fv( GLuint,const GLfloat*)!"
Global glVertexAttrib3s(index_:Int,x_:Short,y_:Short,z_:Short)="void glad_glVertexAttrib3s( GLuint, GLshort, GLshort, GLshort)!"
Global glVertexAttrib3sv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib3sv( GLuint,const GLshort*)!"
Global glVertexAttrib4Nbv(index_:Int,v_:Byte Ptr)="void glad_glVertexAttrib4Nbv( GLuint,const GLbyte*)!"
Global glVertexAttrib4Niv(index_:Int,v_:Int Ptr)="void glad_glVertexAttrib4Niv( GLuint,const GLint*)!"
Global glVertexAttrib4Nsv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib4Nsv( GLuint,const GLshort*)!"
Global glVertexAttrib4Nub(index_:Int,x_:Byte,y_:Byte,z_:Byte,w_:Byte)="void glad_glVertexAttrib4Nub( GLuint, GLubyte, GLubyte, GLubyte, GLubyte)!"
Global glVertexAttrib4Nubv(index_:Int,v_:Byte Ptr)="void glad_glVertexAttrib4Nubv( GLuint,const GLubyte*)!"
Global glVertexAttrib4Nuiv(index_:Int,v_:Int Ptr)="void glad_glVertexAttrib4Nuiv( GLuint,const GLuint*)!"
Global glVertexAttrib4Nusv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib4Nusv( GLuint,const GLushort*)!"
Global glVertexAttrib4bv(index_:Int,v_:Byte Ptr)="void glad_glVertexAttrib4bv( GLuint,const GLbyte*)!"
Global glVertexAttrib4d(index_:Int,x_:Double,y_:Double,z_:Double,w_:Double)="void glad_glVertexAttrib4d( GLuint, GLdouble, GLdouble, GLdouble, GLdouble)!"
Global glVertexAttrib4dv(index_:Int,v_:Double Ptr)="void glad_glVertexAttrib4dv( GLuint,const GLdouble*)!"
Global glVertexAttrib4f(index_:Int,x_:Float,y_:Float,z_:Float,w_:Float)="void glad_glVertexAttrib4f( GLuint, GLfloat, GLfloat, GLfloat, GLfloat)!"
Global glVertexAttrib4fv(index_:Int,v_:Float Ptr)="void glad_glVertexAttrib4fv( GLuint,const GLfloat*)!"
Global glVertexAttrib4iv(index_:Int,v_:Int Ptr)="void glad_glVertexAttrib4iv( GLuint,const GLint*)!"
Global glVertexAttrib4s(index_:Int,x_:Short,y_:Short,z_:Short,w_:Short)="void glad_glVertexAttrib4s( GLuint, GLshort, GLshort, GLshort, GLshort)!"
Global glVertexAttrib4sv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib4sv( GLuint,const GLshort*)!"
Global glVertexAttrib4ubv(index_:Int,v_:Byte Ptr)="void glad_glVertexAttrib4ubv( GLuint,const GLubyte*)!"
Global glVertexAttrib4uiv(index_:Int,v_:Int Ptr)="void glad_glVertexAttrib4uiv( GLuint,const GLuint*)!"
Global glVertexAttrib4usv(index_:Int,v_:Short Ptr)="void glad_glVertexAttrib4usv( GLuint,const GLushort*)!"
Global glVertexAttribDivisor(index_:Int,divisor_:Int)="void glad_glVertexAttribDivisor( GLuint, GLuint)!"
Global glVertexAttribI1i(index_:Int,x_:Int)="void glad_glVertexAttribI1i( GLuint, GLint)!"
Global glVertexAttribI1iv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI1iv( GLuint,const GLint*)!"
Global glVertexAttribI1ui(index_:Int,x_:Int)="void glad_glVertexAttribI1ui( GLuint, GLuint)!"
Global glVertexAttribI1uiv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI1uiv( GLuint,const GLuint*)!"
Global glVertexAttribI2i(index_:Int,x_:Int,y_:Int)="void glad_glVertexAttribI2i( GLuint, GLint, GLint)!"
Global glVertexAttribI2iv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI2iv( GLuint,const GLint*)!"
Global glVertexAttribI2ui(index_:Int,x_:Int,y_:Int)="void glad_glVertexAttribI2ui( GLuint, GLuint, GLuint)!"
Global glVertexAttribI2uiv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI2uiv( GLuint,const GLuint*)!"
Global glVertexAttribI3i(index_:Int,x_:Int,y_:Int,z_:Int)="void glad_glVertexAttribI3i( GLuint, GLint, GLint, GLint)!"
Global glVertexAttribI3iv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI3iv( GLuint,const GLint*)!"
Global glVertexAttribI3ui(index_:Int,x_:Int,y_:Int,z_:Int)="void glad_glVertexAttribI3ui( GLuint, GLuint, GLuint, GLuint)!"
Global glVertexAttribI3uiv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI3uiv( GLuint,const GLuint*)!"
Global glVertexAttribI4bv(index_:Int,v_:Byte Ptr)="void glad_glVertexAttribI4bv( GLuint,const GLbyte*)!"
Global glVertexAttribI4i(index_:Int,x_:Int,y_:Int,z_:Int,w_:Int)="void glad_glVertexAttribI4i( GLuint, GLint, GLint, GLint, GLint)!"
Global glVertexAttribI4iv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI4iv( GLuint,const GLint*)!"
Global glVertexAttribI4sv(index_:Int,v_:Short Ptr)="void glad_glVertexAttribI4sv( GLuint,const GLshort*)!"
Global glVertexAttribI4ubv(index_:Int,v_:Byte Ptr)="void glad_glVertexAttribI4ubv( GLuint,const GLubyte*)!"
Global glVertexAttribI4ui(index_:Int,x_:Int,y_:Int,z_:Int,w_:Int)="void glad_glVertexAttribI4ui( GLuint, GLuint, GLuint, GLuint, GLuint)!"
Global glVertexAttribI4uiv(index_:Int,v_:Int Ptr)="void glad_glVertexAttribI4uiv( GLuint,const GLuint*)!"
Global glVertexAttribI4usv(index_:Int,v_:Short Ptr)="void glad_glVertexAttribI4usv( GLuint,const GLushort*)!"
Global glVertexAttribIPointer(index_:Int,size_:Int,type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glVertexAttribIPointer( GLuint, GLint, GLenum, GLsizei,const void*)!"
Global glVertexAttribP1ui(index_:Int,type_:Int,normalized_:Byte,value_:Int)="void glad_glVertexAttribP1ui( GLuint, GLenum, GLboolean, GLuint)!"
Global glVertexAttribP1uiv(index_:Int,type_:Int,normalized_:Byte,value_:Int Ptr)="void glad_glVertexAttribP1uiv( GLuint, GLenum, GLboolean,const GLuint*)!"
Global glVertexAttribP2ui(index_:Int,type_:Int,normalized_:Byte,value_:Int)="void glad_glVertexAttribP2ui( GLuint, GLenum, GLboolean, GLuint)!"
Global glVertexAttribP2uiv(index_:Int,type_:Int,normalized_:Byte,value_:Int Ptr)="void glad_glVertexAttribP2uiv( GLuint, GLenum, GLboolean,const GLuint*)!"
Global glVertexAttribP3ui(index_:Int,type_:Int,normalized_:Byte,value_:Int)="void glad_glVertexAttribP3ui( GLuint, GLenum, GLboolean, GLuint)!"
Global glVertexAttribP3uiv(index_:Int,type_:Int,normalized_:Byte,value_:Int Ptr)="void glad_glVertexAttribP3uiv( GLuint, GLenum, GLboolean,const GLuint*)!"
Global glVertexAttribP4ui(index_:Int,type_:Int,normalized_:Byte,value_:Int)="void glad_glVertexAttribP4ui( GLuint, GLenum, GLboolean, GLuint)!"
Global glVertexAttribP4uiv(index_:Int,type_:Int,normalized_:Byte,value_:Int Ptr)="void glad_glVertexAttribP4uiv( GLuint, GLenum, GLboolean,const GLuint*)!"
Global glVertexAttribPointer(index_:Int,size_:Int,type_:Int,normalized_:Byte,stride_:Int,pointer_:Byte Ptr)="void glad_glVertexAttribPointer( GLuint, GLint, GLenum, GLboolean, GLsizei,const void*)!"
Global glVertexP2ui(type_:Int,value_:Int)="void glad_glVertexP2ui( GLenum, GLuint)!"
Global glVertexP2uiv(type_:Int,value_:Int Ptr)="void glad_glVertexP2uiv( GLenum,const GLuint*)!"
Global glVertexP3ui(type_:Int,value_:Int)="void glad_glVertexP3ui( GLenum, GLuint)!"
Global glVertexP3uiv(type_:Int,value_:Int Ptr)="void glad_glVertexP3uiv( GLenum,const GLuint*)!"
Global glVertexP4ui(type_:Int,value_:Int)="void glad_glVertexP4ui( GLenum, GLuint)!"
Global glVertexP4uiv(type_:Int,value_:Int Ptr)="void glad_glVertexP4uiv( GLenum,const GLuint*)!"
Global glVertexPointer(size_:Int,type_:Int,stride_:Int,pointer_:Byte Ptr)="void glad_glVertexPointer( GLint, GLenum, GLsizei,const void*)!"
Global glViewport(x_:Int,y_:Int,width_:Int,height_:Int)="void glad_glViewport( GLint, GLint, GLsizei, GLsizei)!"

End Extern
